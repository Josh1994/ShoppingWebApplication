(function (global, factory) {
	if (typeof define === "function" && define.amd) {
		define(['exports', 'lodash'], factory);
	} else if (typeof exports !== "undefined") {
		factory(exports, require('lodash'));
	} else {
		var mod = {
			exports: {}
		};
		factory(mod.exports, global.lodash);
		global.index = mod.exports;
	}
})(this, function (exports, _lodash) {
	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	exports.levels = undefined;
	exports.getMailBox = getMailBox;
	exports.config = config;

	var _ = _interopRequireWildcard(_lodash);

	function _interopRequireWildcard(obj) {
		if (obj && obj.__esModule) {
			return obj;
		} else {
			var newObj = {};

			if (obj != null) {
				for (var key in obj) {
					if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
				}
			}

			newObj.default = obj;
			return newObj;
		}
	}

	function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
			throw new TypeError("Cannot call a class as a function");
		}
	}

	var _createClass = function () {
		function defineProperties(target, props) {
			for (var i = 0; i < props.length; i++) {
				var descriptor = props[i];
				descriptor.enumerable = descriptor.enumerable || false;
				descriptor.configurable = true;
				if ("value" in descriptor) descriptor.writable = true;
				Object.defineProperty(target, descriptor.key, descriptor);
			}
		}

		return function (Constructor, protoProps, staticProps) {
			if (protoProps) defineProperties(Constructor.prototype, protoProps);
			if (staticProps) defineProperties(Constructor, staticProps);
			return Constructor;
		};
	}();

	// TODO nice logger https://github.com/visionmedia/debug
	// by default, ignore context and supply preset values
	var moduleConfig = {
		loggerStrategy: function loggerStrategy(ctx) {
			return DEFAULT_LOGGER;
		},
		panicStrategy: function panicStrategy(ctx) {
			return defaultPanic;
		},
		logThresholdStrategy: function logThresholdStrategy(ctx) {
			return 'info';
		},
		panicThresholdStrategy: function panicThresholdStrategy(ctx) {
			return 'error';
		},
		activateTimers: false
	};

	var mailboxes = [];
	var levels = exports.levels = Object.freeze(['debug', 'info', 'warn', 'error', 'fatal']);
	var DEBUG = 0,
	    INFO = 1,
	    WARN = 2,
	    ERROR = 3,
	    FATAL = 4;
	var levelIdx = Object.freeze({
		debug: DEBUG,
		info: INFO,
		warn: WARN,
		error: ERROR,
		fatal: FATAL
	});
	function getMailBox(context) {
		var mailBox = new Mailbox(postOfficeFactory(context));

		if (moduleConfig.activateTimers) {
			var timers = {};
			mailBox.startTimer = function (id) {
				if (timers[id] !== undefined) {
					this.warn('Escalate timer already started ' + id);
				} else {
					timers[id] = Date.now();
				}
			};
			mailBox.endTimer = function (id) {
				if (timers[id] === undefined) {
					this.warn('Escalate timer not started ' + id);
				} else {
					var timeTaken = Date.now() - timers[id];
					this.info('timer ' + id + ' took ' + timeTaken, 'timer', id, timeTaken);
					delete timers[id];
				}
			};
		}
		mailboxes.push({ mailBox: mailBox, context: context });
		return mailBox;
	}

	var Mailbox = function () {
		function Mailbox(postOffice) {
			_classCallCheck(this, Mailbox);

			this.timers = {};
			this.postOffice = postOffice;
		}

		_createClass(Mailbox, [{
			key: 'post',
			value: function post(level) {
				var levelIndex = levelIdx[level];
				if (typeof levelIndex === 'undefined') {
					throw new Error('log level unknown : ' + level);
				} else {
					var _postOffice;

					for (var _len = arguments.length, params = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
						params[_key - 1] = arguments[_key];
					}

					(_postOffice = this.postOffice).post.apply(_postOffice, [levelIndex].concat(params));
				}
			}
		}, {
			key: 'debug',
			value: function debug() {
				var _postOffice2;

				for (var _len2 = arguments.length, params = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
					params[_key2] = arguments[_key2];
				}

				(_postOffice2 = this.postOffice).post.apply(_postOffice2, [DEBUG].concat(params));
			}
		}, {
			key: 'info',
			value: function info() {
				var _postOffice3;

				for (var _len3 = arguments.length, params = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
					params[_key3] = arguments[_key3];
				}

				(_postOffice3 = this.postOffice).post.apply(_postOffice3, [INFO].concat(params));
			}
		}, {
			key: 'warn',
			value: function warn() {
				var _postOffice4;

				for (var _len4 = arguments.length, params = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
					params[_key4] = arguments[_key4];
				}

				(_postOffice4 = this.postOffice).post.apply(_postOffice4, [WARN].concat(params));
			}
		}, {
			key: 'error',
			value: function error() {
				var _postOffice5;

				for (var _len5 = arguments.length, params = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
					params[_key5] = arguments[_key5];
				}

				(_postOffice5 = this.postOffice).post.apply(_postOffice5, [ERROR].concat(params));
			}
		}, {
			key: 'fatal',
			value: function fatal() {
				var _postOffice6;

				for (var _len6 = arguments.length, params = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
					params[_key6] = arguments[_key6];
				}

				(_postOffice6 = this.postOffice).post.apply(_postOffice6, [FATAL].concat(params));
			}
		}, {
			key: 'startTimer',
			value: function startTimer(id) {}
		}, {
			key: 'endTimer',
			value: function endTimer(id) {}
		}, {
			key: 'levelCheck',
			value: function levelCheck(level) {
				var levelIndex = levelIdx[level];
				return this.postOffice.isActive(levelIndex);
			}
		}, {
			key: 'debugCheck',
			value: function debugCheck() {
				return this.postOffice.isActive(DEBUG);
			}
		}, {
			key: 'infoCheck',
			value: function infoCheck() {
				return this.postOffice.isActive(INFO);
			}
		}, {
			key: 'warnCheck',
			value: function warnCheck() {
				return this.postOffice.isActive(WARN);
			}
		}, {
			key: 'errorCheck',
			value: function errorCheck() {
				return this.postOffice.isActive(ERROR);
			}
		}, {
			key: 'fatalCheck',
			value: function fatalCheck() {
				return true;
			}
		}]);

		return Mailbox;
	}();

	function config(configParams) {
		if (configParams) {
			MAILBOX.warn('configuration changes : ' + Object.keys(configParams));
			moduleConfig = _.defaults({}, _.cloneDeep(configParams), moduleConfig);
			// replace old strategies;
			mailboxes.forEach(function (e) {
				//		MAILBOX.debug(`applying new configuration to ${JSON.stringify(e.context)}`);
				e.mailBox.postOffice = postOfficeFactory(e.context);
			});
		}
		return _.cloneDeep(moduleConfig);
	}

	var DEFAULT_LOGGER = {
		error: function error() {
			var _console;

			return (_console = console).error.apply(_console, arguments);
		},
		warn: function warn() {
			var _console2;

			return (_console2 = console).warn.apply(_console2, arguments);
		},
		info: function info() {
			var _console3;

			return (_console3 = console).info.apply(_console3, arguments);
		},
		debug: function debug() {
			var _console4;

			return (_console4 = console).info.apply(_console4, arguments);
		} // some environments don't have console.debug
	};

	function defaultPanic() {
		for (var _len7 = arguments.length, params = Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
			params[_key7] = arguments[_key7];
		}

		var error = new Error(params.join(' '));
		error.params = params;
		if (error.stack) {
			error.stack = error.stack.split('\n');
			error.stack.splice(1, 3);
			error.stack = error.stack.join('\n');
		}
		throw error;
	}

	function postOfficeFactory(context) {
		return new PostOffice(moduleConfig.loggerStrategy(context), moduleConfig.panicStrategy(context), moduleConfig.logThresholdStrategy(context), moduleConfig.panicThresholdStrategy(context));
	}

	var PostOffice = function () {
		function PostOffice(logger, panic, logThreshold, panicThreshold) {
			_classCallCheck(this, PostOffice);

			this.logger = logger;
			this.panic = panic;
			this.logThreshold = levels.indexOf(logThreshold);
			this.panicThreshold = levels.indexOf(panicThreshold);
			if (this.panicThreshold < this.logThreshold) {
				var msg = 'log threshold ' + logThreshold + ' is higher than panic threshold ' + panicThreshold;
				if (MAILBOX) {
					MAILBOX.error(msg);
				} else {
					throw new Error(msg);
				}
			}
		}

		_createClass(PostOffice, [{
			key: 'isActive',
			value: function isActive(levelIndex) {
				return levelIndex >= this.logThreshold;
			}
		}, {
			key: 'post',
			value: function post(levelIndex) {

				if (this.isActive(levelIndex)) {
					for (var _len8 = arguments.length, params = Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {
						params[_key8 - 1] = arguments[_key8];
					}

					if (levelIndex >= this.panicThreshold) {
						this.panic.apply(this, params);
					} else {
						var _logger;

						(_logger = this.logger)[levels[levelIndex]].apply(_logger, params);
					}
				}
			}
		}]);

		return PostOffice;
	}();

	var MAILBOX = getMailBox('escalate');
});
//# sourceMappingURL=index.js.map