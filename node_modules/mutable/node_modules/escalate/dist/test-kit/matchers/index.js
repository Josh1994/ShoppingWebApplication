(function (global, factory) {
	if (typeof define === "function" && define.amd) {
		define(['exports', 'lodash', 'serialize-javascript', '../testDrivers/index'], factory);
	} else if (typeof exports !== "undefined") {
		factory(exports, require('lodash'), require('serialize-javascript'), require('../testDrivers/index'));
	} else {
		var mod = {
			exports: {}
		};
		factory(mod.exports, global.lodash, global.serializeJavascript, global.index);
		global.index = mod.exports;
	}
})(this, function (exports, _lodash, _serializeJavascript, _index) {
	'use strict';

	Object.defineProperty(exports, "__esModule", {
		value: true
	});

	exports.default = function (chai) {
		/**
   * matches a report that is generated by the function under test
   */
		chai.Assertion.addMethod("report", function reportImpl(_ref) {
			var context = _ref.context,
			    level = _ref.level,
			    params = _ref.params;

			var reports = (0, _index.listen)(this._obj);
			var paramsCandidates = _.map(reports.filter(function (r) {
				return (!context || matchField(r.context, context)) && (!level || matchField(r.level, level));
			}), 'params');
			this.assert(paramsCandidates.length && matchArrayOfParamsByArrayOfMatchers(paramsCandidates, params), 'Expected #{this} to report, but it didn\'t.\n\nexpected context: ' + context + '\n\nexpected level: ' + level + '\n\nexpected params: ' + (0, _serializeJavascript2.default)(params) + '\n\nactual: ' + JSON.stringify(reports), 'Expected #{this} not to report, but it did.\n ' + JSON.stringify(reports));
		});
	};

	var _ = _interopRequireWildcard(_lodash);

	var _serializeJavascript2 = _interopRequireDefault(_serializeJavascript);

	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : {
			default: obj
		};
	}

	function _interopRequireWildcard(obj) {
		if (obj && obj.__esModule) {
			return obj;
		} else {
			var newObj = {};

			if (obj != null) {
				for (var key in obj) {
					if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
				}
			}

			newObj.default = obj;
			return newObj;
		}
	}

	function matchField(reported, matcher) {
		if (matcher) {
			return matcher === reported || JSON.stringify(matcher) === JSON.stringify(reported) || matcher instanceof RegExp && matcher.test('' + reported);
		} else return !reported;
	} /**
    * Created by amira on 6/8/15.
    */


	function matchParamsByArray(reportedParams, matcherArr) {
		return _.every(matcherArr, function (matcher) {
			return _.some(reportedParams, function (param) {
				return matchField(param, matcher);
			});
		});
	}

	function matchArrayOfParamsByArrayOfMatchers(reportedParamsArr, matcherArr) {
		if (!matcherArr) {
			matcherArr = [];
		} else if (!_.isArray(matcherArr)) {
			matcherArr = [matcherArr];
		}
		return _.some(reportedParamsArr, function (reportedParams) {
			return matchParamsByArray(reportedParams, matcherArr);
		});
	}
});
//# sourceMappingURL=index.js.map