(function (global, factory) {
	if (typeof define === "function" && define.amd) {
		define(['chai', '../../src/index', '../testDrivers/index'], factory);
	} else if (typeof exports !== "undefined") {
		factory(require('chai'), require('../../src/index'), require('../testDrivers/index'));
	} else {
		var mod = {
			exports: {}
		};
		factory(global.chai, global.index, global.index);
		global.index = mod.exports;
	}
})(this, function (_chai, _index, _index2) {
	'use strict';

	var escalate = _interopRequireWildcard(_index);

	function _interopRequireWildcard(obj) {
		if (obj && obj.__esModule) {
			return obj;
		} else {
			var newObj = {};

			if (obj != null) {
				for (var key in obj) {
					if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
				}
			}

			newObj.default = obj;
			return newObj;
		}
	}

	var PARAMS = ['TEST PARAMS', 1, {}]; /**
                                       * Created by amira on 6/8/15.
                                       */

	var CONTEXT = {};
	function getOneTimeReporterForLevel(reportLevel) {
		return function () {
			var _escalate$getMailBox;

			return (_escalate$getMailBox = escalate.getMailBox(CONTEXT))[reportLevel].apply(_escalate$getMailBox, PARAMS);
		};
	}
	function testMatcherConlfusionMatrix(matcher, positive, negative) {
		it('matches existing reports (true positive)', function () {
			(0, _chai.expect)(function () {
				(0, _chai.expect)(positive).to.report(matcher);
			}).to.not.throw();
		});
		it('matches missing reports (true negative)', function () {
			(0, _chai.expect)(function () {
				(0, _chai.expect)(negative).not.to.report(matcher);
			}).to.not.throw();
		});
		it('does not match existing reports as missing (false negative)', function () {
			(0, _chai.expect)(function () {
				(0, _chai.expect)(positive).not.to.report(matcher);
			}).to.throw();
		});
		it('does not match missing reports as existing (false positive)', function () {
			(0, _chai.expect)(function () {
				(0, _chai.expect)(negative).to.report(matcher);
			}).to.throw();
		});
	}
	describe('escalate testkit', function () {
		escalate.levels.forEach(function (reportLevel, reportIdx) {
			var reportMatcher = new _index2.Report(reportLevel, CONTEXT, PARAMS);
			var reporterForLevel = getOneTimeReporterForLevel(reportLevel);
			var reporterForAnotherLevel = getOneTimeReporterForLevel(escalate.levels[(reportIdx + 1) % escalate.levels.length]);
			describe('exact chai matcher for \'' + reportLevel + '\' level', function () {
				testMatcherConlfusionMatrix(reportMatcher, reporterForLevel, reporterForAnotherLevel);
			});
			it('recorder tool can match ' + reportLevel + ' reports', function () {
				var recording = (0, _index2.listen)(reporterForLevel);
				(0, _chai.expect)(recording).to.eql([{ level: reportLevel, context: CONTEXT, params: PARAMS }]);
				(0, _chai.expect)(recording).to.eql([reportMatcher]);
			});
			it('mailbox.post(' + reportLevel + ', ...) reports', function () {
				(0, _chai.expect)(function () {
					var _escalate$getMailBox2;

					return (_escalate$getMailBox2 = escalate.getMailBox(CONTEXT)).post.apply(_escalate$getMailBox2, [reportLevel].concat(PARAMS));
				}).to.report(reportMatcher);
			});
		});
		describe('chai matcher for regex', function () {
			testMatcherConlfusionMatrix({ level: /warn|error|fatal/ }, getOneTimeReporterForLevel('error'), getOneTimeReporterForLevel('info'));
		});
	});
});
//# sourceMappingURL=index.js.map