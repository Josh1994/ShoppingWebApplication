"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var sinon = require("sinon");
var chai_1 = require("chai");
var mu = require("../src");
describe('LifecycleManager', function () {
    var lifecycleManager;
    beforeEach('init', function () {
        lifecycleManager = new mu.LifeCycleManager();
    });
    describe('manages change', function () {
        it('.forbidChange() sets __readOnly__ to true', function () {
            lifecycleManager.__readOnly__ = false;
            lifecycleManager.forbidChange();
            chai_1.expect(lifecycleManager.__readOnly__).to.be.ok;
        });
        it('.allowChange() sets __readOnly__ to false', function () {
            lifecycleManager.__readOnly__ = true;
            lifecycleManager.allowChange();
            chai_1.expect(lifecycleManager.__readOnly__).not.to.be.ok;
        });
    });
    describe('manages tracking', function () {
        it('.forbidTracking() sets __tracked__ to false', function () {
            lifecycleManager.__tracked__ = true;
            lifecycleManager.forbidTracking();
            chai_1.expect(lifecycleManager.__tracked__).not.to.be.ok;
        });
        it('.alowTracking() sets __readOnly__ to true', function () {
            lifecycleManager.__tracked__ = false;
            lifecycleManager.alowTracking();
            chai_1.expect(lifecycleManager.__tracked__).to.be.ok;
        });
    });
    describe('.$bindAtom()', function () {
        var atom, originalReportObserved;
        beforeEach('init', function () {
            originalReportObserved = sinon.spy();
            atom = { reportObserved: originalReportObserved };
            lifecycleManager.$bindAtom(atom);
        });
        describe('proxies original atom.reportObserved', function () {
            it('ignores calls when __tracked__ is false', function () {
                lifecycleManager.__tracked__ = false;
                atom.reportObserved();
                chai_1.expect(originalReportObserved).to.have.not.been.called;
            });
            it('calls original when __tracked__ is true', function () {
                lifecycleManager.__tracked__ = true;
                atom.reportObserved(1, null, '3'); // 1, null, '3' are just arbitrary arguments
                chai_1.expect(originalReportObserved).to.have.been.calledOnce;
                chai_1.expect(originalReportObserved.firstCall).to.have.been.calledWith(1, null, '3');
                chai_1.expect(originalReportObserved.firstCall).to.have.been.calledOn(atom);
            });
        });
    });
});
//# sourceMappingURL=lifecycle-manager.spec.js.map