"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var mutable = require("../../src");
var chai_1 = require("chai");
var mobx_1 = require("mobx");
var sinon = require("sinon");
var config_1 = require("../../src/config");
describe('[mobx contract] user defined class', function () {
    var Child;
    var child;
    before(function () {
        var Parent = mutable.define('Parent', { spec: function (c) { return ({
                foo: mutable.Number
            }); } });
        Child = mutable.define('Child', { spec: function (c) { return ({
                bar: mutable.Number
            }); } }, Parent);
    });
    beforeEach(function () {
        child = new Child();
    });
    var trackingActionsContract = function () {
        var reaction;
        beforeEach(function () {
            reaction = new mobx_1.Reaction('obj', function () { });
            chai_1.expect(reaction.observing.length).to.eql(0);
        });
        afterEach(function () {
            reaction.dispose();
        });
        function assertReaction() {
            if (config_1.default.observable) {
                chai_1.expect(reaction.observing.length).to.not.eql(0);
            }
            else {
                chai_1.expect(reaction.observing.length).to.eql(0);
            }
        }
        it('own field read', function () {
            reaction.track(function () {
                child.bar;
            });
            assertReaction();
        });
        it('inherited field read', function () {
            reaction.track(function () {
                child.foo;
            });
            assertReaction();
        });
        it('toJSON', function () {
            reaction.track(function () {
                child.toJSON();
            });
            assertReaction();
        });
        it('toJS', function () {
            reaction.track(function () {
                child.toJS();
            });
            assertReaction();
        });
    };
    describe('tracks', trackingActionsContract);
    describe('(when config.observable is false) does not track', function () {
        before(function () {
            config_1.default.observable = false;
        });
        after(function () {
            config_1.default.observable = true;
        });
        trackingActionsContract();
    });
    describe('never track', function () {
        var objSpy, reaction;
        beforeEach(function () {
            objSpy = sinon.spy();
            reaction = new mobx_1.Reaction('obj', objSpy);
            chai_1.expect(reaction.observing.length).to.eql(0);
        });
        afterEach(function () {
            reaction.dispose();
        });
        it('setValue with empty argument', function () {
            reaction.track(function () {
                child.setValue({});
            });
            chai_1.expect(reaction.observing.length).to.eql(0);
        });
        it('setValueDeep with empty argument', function () {
            reaction.track(function () {
                child.setValueDeep({});
            });
            chai_1.expect(reaction.observing.length).to.eql(0);
        });
    });
    describe('triggers mobx reaction on changes to', function () {
        var fooSpy, fooReaction, barSpy, barReaction;
        beforeEach(function () {
            fooSpy = sinon.spy();
            fooReaction = new mobx_1.Reaction('foo', fooSpy);
            fooReaction.track(function () { return child.foo; });
            barSpy = sinon.spy();
            barReaction = new mobx_1.Reaction('bar', barSpy);
            barReaction.track(function () { return child.bar; });
        });
        afterEach(function () {
            fooReaction.dispose();
            barReaction.dispose();
        });
        it('own field assignment', function () {
            child.bar = 2;
            chai_1.expect(barSpy).to.have.been.callCount(1);
            chai_1.expect(fooSpy).to.have.been.callCount(0);
        });
        it('inherited field assignment', function () {
            child.foo = 2;
            chai_1.expect(barSpy).to.have.been.callCount(0);
            chai_1.expect(fooSpy).to.have.been.callCount(1);
        });
        it('setValue', function () {
            child.setValue({ foo: 2, bar: 2 });
            chai_1.expect(fooSpy).to.have.been.callCount(1);
            chai_1.expect(barSpy).to.have.been.callCount(1);
        });
        it('setValueDeep', function () {
            child.setValueDeep({ foo: 2, bar: 2 });
            chai_1.expect(fooSpy).to.have.been.callCount(1);
            chai_1.expect(barSpy).to.have.been.callCount(1);
        });
    });
    describe('does not trigger mobx reaction as a result of', function () {
        var objSpy, reaction;
        beforeEach(function () {
            objSpy = sinon.spy();
            reaction = new mobx_1.Reaction('obj', objSpy);
            reaction.track(function () { return child.foo + child.bar; });
        });
        afterEach(function () {
            reaction.dispose();
        });
        it('setValue with empty argument', function () {
            child.setValue({});
            chai_1.expect(objSpy).to.have.been.callCount(0);
        });
        it('setValueDeep with empty argument', function () {
            child.setValueDeep({});
            chai_1.expect(objSpy).to.have.been.callCount(0);
        });
        it('setting field to NaN', function () {
            child.foo = NaN;
            chai_1.expect(objSpy).to.have.been.callCount(1);
            child.foo = NaN;
            chai_1.expect(objSpy).to.have.been.callCount(1);
        });
    });
    describe('reports to mobx spy and observer on', function () {
        var spyListener;
        var observeListener;
        var spyDestroy;
        var observeDestroy;
        function expectMobxReported(expected) {
            var eventMatcher = function (change) { return Object.keys(expected).every(function (k) { return change[k] === expected[k]; }); };
            chai_1.expect(spyListener).to.have.been.called;
            //    expect(observeListener).to.have.been.called;
            chai_1.expect(spyListener).to.have.been.calledWith(sinon.match(eventMatcher));
            //    expect(observeListener).to.have.been.calledWith(sinon.match(eventMatcher));
        }
        beforeEach(function () {
            observeListener = sinon.spy();
            //    observeDestroy = observe(child, observeListener);
            spyListener = sinon.spy();
            spyDestroy = mobx_1.spy(spyListener);
        });
        afterEach(function () {
            //    observeDestroy();
            spyDestroy();
        });
        it('fields initialization', function () {
            child = new Child({ bar: 2 });
            expectMobxReported({
                type: 'add',
                newValue: 2,
                name: 'bar'
            });
            expectMobxReported({
                type: 'add',
                newValue: 0,
                name: 'foo'
            });
        });
        it('own field assignment', function () {
            child.bar = 2;
            expectMobxReported({
                type: 'update',
                oldValue: 0,
                newValue: 2,
                name: 'bar'
            });
        });
        it('inherited field assignment', function () {
            child.foo = 2;
            expectMobxReported({
                type: 'update',
                oldValue: 0,
                newValue: 2,
                name: 'foo'
            });
        });
        it('setValue', function () {
            child.setValue({ foo: 2, bar: 2 });
            expectMobxReported({
                type: 'update',
                oldValue: 0,
                newValue: 2,
                name: 'foo'
            });
            expectMobxReported({
                type: 'update',
                oldValue: 0,
                newValue: 2,
                name: 'bar'
            });
        });
        it('setValueDeep', function () {
            child.setValueDeep({ foo: 2, bar: 2 });
            expectMobxReported({
                type: 'update',
                oldValue: 0,
                newValue: 2,
                name: 'foo'
            });
            expectMobxReported({
                type: 'update',
                oldValue: 0,
                newValue: 2,
                name: 'bar'
            });
        });
    });
    describe('satisfies mobx-react-devtools contract', function () {
        it('has a recognised administrator object', function () {
            chai_1.expect(mobx_1.extras.getAdministration(child)).to.be.ok;
        });
        it('satisfies mobx.isObservableObject()', function () {
            chai_1.expect(mobx_1.isObservableObject(child)).to.eql(true);
        });
        it('provides a meaningful result to getDebugName()', function () {
            chai_1.expect(mobx_1.extras.getDebugName(child)).to.eql(child.getName());
        });
        it('has meaningful $mobx.name (otherwise constructor.name is used)', function () {
            chai_1.expect(child.$mobx.name).to.eql(child.getName());
        });
        it('shows on reaction\'s getDependencyTree()', function () {
            var name = 'obj';
            var reaction = new mobx_1.Reaction(name, function () { });
            try {
                reaction.track(function () {
                    child.foo;
                });
                chai_1.expect(mobx_1.extras.getDependencyTree(reaction)).to.eql({ name: name, dependencies: [{ name: "[" + child.getName() + "].foo" }] });
            }
            finally {
                reaction.dispose();
            }
        });
    });
});
//# sourceMappingURL=mobx-contract.spec.js.map