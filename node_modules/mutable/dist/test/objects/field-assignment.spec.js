"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var mutable = require("../../src");
var primitiveClasses = [
    mutable.String,
    mutable.Boolean,
    mutable.Number,
    mutable.Function
];
var concreteClasses = primitiveClasses.concat([
    mutable.Reference,
    mutable.List.of(mutable.String),
    mutable.Es5Map.of(mutable.String),
    mutable.PropsBase // an example for a user class
]);
var UserClass = mutable.define('UserClass', { spec: function (c) { return ({
        foo: mutable.Number
    }); } });
var UserClassChild = mutable.define('UserClassChild', { spec: function (c) { return ({
        bar: mutable.Number
    }); } }, UserClass);
var AnotherUserClass = mutable.define('AnotherUserClass', { spec: function (c) { return ({
        foo: mutable.Number
    }); } });
describe('field definition', function () {
    complianceContract(mutable.Any, concreteClasses, []);
    primitiveClasses.forEach(function (pc) {
        complianceContract(pc, [pc], concreteClasses.filter(function (c) { return c !== pc; }));
    });
    complianceContract(mutable.Base, [
        mutable.List.of(mutable.String),
        mutable.Es5Map.of(mutable.String),
        UserClass
    ], [
        mutable.String,
        mutable.Boolean,
        mutable.Number,
        mutable.Function
    ]);
    complianceContract(mutable.Object, [
        UserClass
    ], [
        mutable.String,
        mutable.Boolean,
        mutable.Number,
        mutable.Function,
        mutable.List.of(mutable.String),
        mutable.Es5Map.of(mutable.String),
    ]);
    complianceContract(UserClass, [
        UserClassChild
    ], concreteClasses.concat([AnotherUserClass]));
});
function complianceContract(fieldDef, subTypes, incompatibleTypes) {
    describe("of type " + fieldDef.id, function () {
        var instance;
        before('define type', function () {
            var ContainerClass = mutable.define('ContainerClass', {
                spec: function (self) { return ({ field: fieldDef }); }
            });
            instance = new ContainerClass();
        });
        subTypes.forEach(function (st) {
            it("accepts value of " + st.id, function () {
                instance.field = st.create();
            });
        });
        incompatibleTypes.forEach(function (_it) {
            it("rejects value of " + _it.id, function () {
                chai_1.expect(function () { instance.field = _it.create(); }).to.report({ level: /error/ });
            });
        });
    });
}
//# sourceMappingURL=field-assignment.spec.js.map