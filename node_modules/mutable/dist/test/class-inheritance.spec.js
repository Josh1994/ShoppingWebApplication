"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var sinon = require("sinon");
var mutable = require("../src");
var test_kit_1 = require("../test-kit");
describe('a user class using babel inheritance', function () {
    it('should provide default values', function () {
        var UserClass = test_kit_1.default.drivers.inheritBabel(mutable.Object);
        var Type1 = mutable.define('Type1', {
            spec: function () { return ({
                str: mutable.String
            }); }
        }, UserClass);
        var Type2 = mutable.define('Type2', {
            spec: function () {
                return {
                    int: mutable.Number,
                    bool: mutable.Boolean,
                };
            }
        }, Type1);
        var obj = new Type2();
        chai_1.expect(obj).to.be.instanceof(mutable.Object);
        chai_1.expect(obj).to.be.instanceof(UserClass);
        chai_1.expect(obj).to.be.instanceof(Type1);
        chai_1.expect(obj).to.be.instanceof(Type2);
        chai_1.expect(obj.str).to.equal('');
        chai_1.expect(obj.int).to.equal(0);
        chai_1.expect(obj.bool).to.equal(false);
    });
    it('should allow overriding wrapValue', function () {
        var unexpectedValue = function () { };
        var UserClass = test_kit_1.default.drivers.inheritBabel(mutable.Object);
        UserClass.wrapValue = sinon.spy(function wrapValue(value, spec, options, errorContext) {
            if (options === void 0) { options = {}; }
            return { str: unexpectedValue };
        });
        var Type1 = mutable.define('Type1', {
            spec: function () { return ({
                str: mutable.String
            }); }
        }, UserClass);
        var obj = new Type1();
        chai_1.expect(UserClass.wrapValue).to.have.been.calledWith(Type1.defaults(), Type1._spec);
        chai_1.expect(obj.str).to.equal(unexpectedValue);
    });
});
//# sourceMappingURL=class-inheritance.spec.js.map