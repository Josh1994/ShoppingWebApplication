"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var test_drivers_1 = require("../test-kit/test-drivers");
var mu = require("../src");
var sinon = require("sinon");
describe('reference', function () {
    var Type1, Root, reference, state;
    before(function () {
        Type1 = test_drivers_1.aDataTypeWithSpec({ foo: mu.String }, 'Type1');
        Root = test_drivers_1.aDataTypeWithSpec({
            foo: mu.String,
            complex: Type1,
            listFoo: mu.List.of(mu.String),
            listComplex: mu.List.of(Type1),
            mapFoo: mu.Es5Map.of(mu.String),
            mapComplex: mu.Es5Map.of(Type1)
        }, 'Root');
    });
    beforeEach('reset initial inner object', function () {
        reference = sinon.spy(function () { return state; });
        state = {
            foo: 'bar',
            complex: {
                foo: 'bar'
            },
            listFoo: ['foo', 'bar', 'baz'],
            listComplex: [{ foo: 'bar' }, { foo: 'buz' }],
            mapFoo: { foo: 'bar', baz: 'fiz' },
            mapComplex: { foo: { foo: 'bar' }, baz: { foo: 'buz' } }
        };
    });
    it('make a reference instance', function () {
        Root.byReference(reference);
        chai_1.expect(reference).to.have.not.been.called;
    });
    describe('instance', function () {
        var rootRef;
        beforeEach('make an instance without resolving reference', function () {
            rootRef = Root.byReference(reference.bind(null)); // bind to null to avoid sinon-chai error reporting iterating over `this`
        });
        it('is instance of its type', function () {
            chai_1.expect(rootRef).to.be.instanceOf(Root);
            chai_1.expect(reference).to.have.not.been.called;
        });
        describe('primitive property', function () {
            it('has correct value', function () {
                chai_1.expect(rootRef.foo).to.eql('bar');
                chai_1.expect(reference).to.have.been.calledOnce;
            });
            it('tracks changes', function () {
                state.foo = 'baz';
                chai_1.expect(rootRef.foo).to.eql(state.foo);
            });
        });
        describe('complex property', function () {
            it('has correct value', function () {
                var element = rootRef.complex;
                chai_1.expect(element).to.be.instanceOf(Type1);
                chai_1.expect(reference).to.have.been.calledOnce;
                chai_1.expect(element.foo).to.eql('bar');
                chai_1.expect(reference).to.have.been.calledTwice;
            });
            it('tracks changes', function () {
                var element = rootRef.complex;
                state.complex.foo = 'baz';
                chai_1.expect(element.foo).to.eql(state.complex.foo);
            });
        });
        describe('list of primitive property', function () {
            it('has correct value', function () {
                var list = rootRef.listFoo;
                chai_1.expect(list).to.be.instanceOf(mu.List);
                chai_1.expect(reference).to.have.been.calledOnce;
                chai_1.expect(list.at(0)).to.eql('foo');
                chai_1.expect(list.toJS()).to.eql(['foo', 'bar', 'baz']);
            });
            it('tracks changes', function () {
                var list = rootRef.listFoo;
                state.listFoo = ['baz'];
                chai_1.expect(list.toJS()).to.eql(state.listFoo);
            });
        });
        describe('list of complex property', function () {
            it('has correct value', function () {
                var list = rootRef.listComplex;
                chai_1.expect(list).to.be.instanceOf(mu.List);
                chai_1.expect(reference).to.have.been.calledOnce;
                var element = list.at(0);
                chai_1.expect(element).to.be.instanceOf(Type1);
                chai_1.expect(element.foo).to.eql('bar');
                chai_1.expect(list.toJS()).to.eql([{ foo: 'bar' }, { foo: 'buz' }]);
            });
            it('tracks changes', function () {
                var list = rootRef.listComplex;
                state.listComplex = [{ foo: 'meep' }];
                chai_1.expect(list.toJS()).to.eql(state.listComplex);
            });
        });
        describe('map of primitive property', function () {
            it('has correct value', function () {
                var map = rootRef.mapFoo;
                chai_1.expect(map).to.be.instanceOf(mu.Es5Map);
                chai_1.expect(reference).to.have.been.calledOnce;
                chai_1.expect(map.get('foo')).to.eql(state.mapFoo.foo);
                chai_1.expect(map.toJS()).to.eql(state.mapFoo);
            });
            it('tracks changes', function () {
                var map = rootRef.mapFoo;
                state.mapFoo = { 'abc': '456' };
                chai_1.expect(map.toJS()).to.eql(state.mapFoo);
            });
        });
        describe('map of complex property', function () {
            it('has correct value', function () {
                var map = rootRef.mapComplex;
                chai_1.expect(map).to.be.instanceOf(mu.Map);
                chai_1.expect(reference).to.have.been.calledOnce;
                var element = map.get('foo');
                chai_1.expect(element).to.be.instanceOf(Type1);
                chai_1.expect(element.foo).to.eql(state.mapComplex.foo.foo);
                chai_1.expect(map.toJS()).to.eql(state.mapComplex);
            });
            it('tracks changes', function () {
                var map = rootRef.mapComplex;
                state.mapComplex = { bar: { foo: '123' } };
                chai_1.expect(map.toJS()).to.eql(state.mapComplex);
            });
        });
    });
});
//# sourceMappingURL=by-reference.spec.js.map