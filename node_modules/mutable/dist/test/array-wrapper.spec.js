"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var array_wrapper_1 = require("../src/data-types/array-wrapper");
var lodash_1 = require("lodash");
var sinon = require("sinon");
function mapper(input) {
    return '*' + input;
}
describe('array wrapper', function () {
    var wrapper;
    var reference;
    var origin;
    var expected;
    beforeEach('reset initial inner object', function () {
        // reference is the method that fetches the inner array data
        reference = sinon.spy(function () { return origin.slice(); });
        origin = [5, 7, 11]; // the source of the data
        expected = function () { return origin.map(mapper); }; // expected view of the data
        wrapper = new array_wrapper_1.ArrayWrapper(reference, mapper);
        chai_1.expect(reference).to.have.not.been.called;
    });
    it('creates an array-like instance', function () {
        chai_1.expect(lodash_1.isArrayLike(wrapper), 'isArrayLike').to.be.true;
        chai_1.expect(reference).to.have.been.calledOnce; // internally checks .length property
    });
    describe('.length', function () {
        it('reflects the wrapped value', function () {
            chai_1.expect(wrapper.length).to.eql(origin.length);
            chai_1.expect(reference).to.have.been.calledOnce;
        });
        it('reflects changes in the wrapped value', function () {
            origin = [];
            chai_1.expect(wrapper.length).to.eql(origin.length);
            chai_1.expect(reference).to.have.been.calledOnce;
        });
    });
    describe('index acessor', function () {
        it('reflects the wrapped value', function () {
            chai_1.expect(wrapper[0]).to.eql(expected()[0]);
            chai_1.expect(wrapper[1]).to.eql(expected()[1]);
            chai_1.expect(wrapper[2]).to.eql(expected()[2]);
            chai_1.expect(reference).to.have.been.calledThrice;
        });
        it('reflects changes in the wrapped value', function () {
            origin = [1, 2];
            chai_1.expect(wrapper[0]).to.eql(expected()[0]);
            chai_1.expect(wrapper[1]).to.eql(expected()[1]);
            chai_1.expect(reference).to.have.been.calledTwice;
            var result2;
            chai_1.expect(function () { return result2 = wrapper[2]; }).to.report({ level: 'warn' });
            chai_1.expect(result2).to.be.undefined;
            chai_1.expect(reference).to.have.been.calledThrice;
        });
    });
    describe('.map', function () {
        it('works as expected', function () {
            chai_1.expect(wrapper.map(function (e) { return '_' + e; })).to.eql(expected().map(function (e) { return '_' + e; }));
            chai_1.expect(reference).to.have.callCount(origin.length + 1);
        });
    });
    describe('.reverse', function () {
        it('works as expected', function () {
            chai_1.expect(wrapper.map(function (e) { return '_' + e; })).to.eql(expected().map(function (e) { return '_' + e; }));
            chai_1.expect(reference).to.have.callCount(origin.length + 1);
        });
    });
    describe('.slice', function () {
        it('works as expected (no args)', function () {
            chai_1.expect(wrapper.slice()).to.eql(expected().slice());
            chai_1.expect(reference).to.have.callCount(origin.length + 1);
        });
        it('works as expected (with args)', function () {
            var start = 1, end = 2;
            chai_1.expect(wrapper.slice(start, end)).to.eql(expected().slice(start, end));
            chai_1.expect(reference).to.have.callCount(end - start + 1);
        });
    });
    describe('.join', function () {
        it('works as expected', function () {
            chai_1.expect(wrapper.join(' ')).to.eql(expected().join(' '));
            chai_1.expect(reference).to.have.callCount(origin.length + 1);
        });
    });
    describe('.indexOf', function () {
        it('works as expected', function () {
            chai_1.expect(wrapper.indexOf(mapper(7))).to.eql(expected().indexOf(mapper(7)));
            chai_1.expect(reference).to.have.callCount(expected().indexOf(mapper(7)) + 2);
        });
        it('works as expected (not found)', function () {
            chai_1.expect(wrapper.indexOf(mapper(-100))).to.eql(expected().indexOf(mapper(-100)));
            chai_1.expect(reference).to.have.callCount(origin.length + 1);
        });
    });
    describe('.lastIndexOf', function () {
        it('works as expected', function () {
            origin = [11, 5, 7, 7, 5, 11];
            chai_1.expect(wrapper.lastIndexOf(mapper(7))).to.eql(expected().lastIndexOf(mapper(7)));
            chai_1.expect(reference).to.have.callCount(origin.length - expected().lastIndexOf(mapper(7)) + 1);
        });
        it('works as expected (not found)', function () {
            chai_1.expect(wrapper.lastIndexOf(mapper(-100))).to.eql(expected().lastIndexOf(mapper(-100)));
            chai_1.expect(reference).to.have.callCount(origin.length + 1);
        });
    });
    describe('.reduce', function () {
        it('works as expected', function () {
            chai_1.expect(wrapper.reduce(function (a, c) { return a + c; })).to.eql(expected().reduce(function (a, c) { return a + c; }));
            chai_1.expect(reference).to.have.callCount(origin.length + 1);
        });
    });
});
//# sourceMappingURL=array-wrapper.spec.js.map