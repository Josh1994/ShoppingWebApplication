"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var builders = require("./builders");
var reports_1 = require("../../test-kit/test-drivers/reports");
describe('Es5 Map', function () {
    it('reports correct error in bad parameter type to get method', function () {
        var map = builders.aNumberMap({ 'foo': 5 });
        chai_1.expect(function () { return map.get(true); }).to
            .report(reports_1.ERROR_KEY_MISMATCH_IN_MAP_METHOD('get', "Es5Map<" + "number>", '<string>', 'boolean', 'Es5Map'));
    });
    it('reports correct error in bad parameter type to delete method', function () {
        var map = builders.aNumberMap({ 'foo': 5 });
        chai_1.expect(function () { return map.delete(true); }).to
            .report(reports_1.ERROR_KEY_MISMATCH_IN_MAP_METHOD('delete', "Es5Map<" + "number>", '<string>', 'boolean', 'Es5Map'));
    });
    it('reports correct error in bad parameter type to has method', function () {
        var map = builders.aNumberMap({ 'foo': 5 });
        chai_1.expect(function () { return map.has(true); }).to
            .report(reports_1.ERROR_KEY_MISMATCH_IN_MAP_METHOD('has', "Es5Map<" + "number>", '<string>', 'boolean', 'Es5Map'));
    });
    it('reports correct error in bad key parameter type to set method', function () {
        var map = builders.aNumberMap({ 'foo': 5 });
        chai_1.expect(function () { return map.set(true, 3); }).to
            .report(reports_1.ERROR_KEY_MISMATCH_IN_MAP_METHOD('set', "Es5Map<" + "number>", '<string>', 'boolean', 'Es5Map'));
    });
    it('reports correct error in bad value parameter type to set method', function () {
        var map = builders.aNumberMap({ 'foo': 5 });
        chai_1.expect(function () { return map.set('foo', true); }).to
            .report(reports_1.ERROR_VALUE_MISMATCH_IN_MAP_METHOD('set', "Es5Map<" + "number>", '<number>', 'boolean', 'Es5Map'));
    });
    it('supports empty string as key in constructor', function () {
        var map = builders.aNumberMap({ '': 5 });
        chai_1.expect(map.get('')).to.eql(5);
    });
    it('supports empty string as key in get method', function () {
        var map = builders.aNumberMap({ 'foo': 5 });
        chai_1.expect(map.get('')).to.eql(undefined);
    });
});
//# sourceMappingURL=type-edge-cases.spec.js.map