"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var sinon = require("sinon");
var mu = require("../../../src");
var test_drivers_1 = require("../../../test-kit/test-drivers");
var builders = require("../builders");
var hasSymbols = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol';
function mapEntries(map) {
    var entries = [];
    map.forEach(function (v, k) { return entries.push([k, v]); });
    return entries;
}
function objEntries(obj) {
    return Object.keys(obj).map(function (key) { return [key, obj[key]]; });
}
function testReadFunctionality(builders, isReadonly) {
    describe(typeOfObj(isReadonly) + ' instance', function () {
        var userA, userB, usersMap, usersMapInitialState;
        beforeEach('init example data', function () {
            userA = new builders.UserType({ age: 1000 });
            userB = new builders.UserType({ age: 1001 });
            usersMapInitialState = [['userA', userA], ['userB', userB]];
            usersMap = builders.aUserTypeMap(usersMapInitialState);
        });
        describe('as field on data object', function () {
            var GroupType;
            before(function () {
                GroupType = mu.define('GroupType', {
                    spec: function () {
                        return {
                            title: mu.String,
                            users: mu.Es5Map.of(builders.UserType)
                        };
                    }
                });
            });
            it('Should be instantiatable ', function () {
                chai_1.expect(function () { return new GroupType(); }).not.to.throw();
            });
            it('Should be modified from json ', function () {
                var groupData = new GroupType();
                groupData.users = mu.Es5Map.of(builders.UserType).create({
                    tom: { 'name': 'tom', 'age': 25 },
                    omri: { 'name': 'omri', 'age': 35 }
                });
                chai_1.expect(groupData.users.get('tom').name).to.equal('tom');
                chai_1.expect(groupData.users.get('tom').age).to.equal(25);
                chai_1.expect(groupData.users.get('omri').name).to.equal('omri');
                chai_1.expect(groupData.users.get('omri').age).to.equal(35);
            });
        });
        describe('size', function () {
            it('should reflect number of entries in map', function () {
                var numbers = builders.aNumberMap({ 1: 1, 2: 2, 3: 3 });
                chai_1.expect(numbers.size).to.equal(3);
            });
        });
        describe('toJSON', function () {
            it('should return entries json object by default', function () {
                chai_1.expect(usersMap.toJSON()).to.eql({ 'userA': userA.toJSON(), 'userB': userB.toJSON() });
            });
            it('should return typed entries json object if set to typed', function () {
                chai_1.expect(usersMap.toJSON(true, true)).to.eql({ 'userA': userA.toJSON(true, true), 'userB': userB.toJSON(true, true), _type: "Es5Map" });
            });
            it('should return entries object if not recursive', function () {
                chai_1.expect(usersMap.toJSON(false).userA).to.equal(userA);
                chai_1.expect(usersMap.toJSON(false).userB).to.equal(userB);
            });
            it('should expose ' + typeOfObj(isReadonly) + ' entries', function () {
                chai_1.expect(usersMap.toJSON(false).userA.$isReadOnly(), 'value is readonly').to.equal(isReadonly);
            });
            it('should return empty object if empty', function () {
                var jsonModel = {};
                var numbersMap = builders.aNumberMap(jsonModel);
                chai_1.expect(numbersMap.toJSON()).to.eql(jsonModel);
            });
        });
        describe('toJS', function () {
            it('should call toJS on values that implement it', function () {
                var serializableType = builders.UserType;
                var Es5Map = mu.Es5Map.of(serializableType);
                var serializableItem = new serializableType();
                serializableItem.toJS = function () { return 'called'; };
                var map = new Es5Map({ 'foo': serializableItem });
                var res = map.toJS();
                chai_1.expect(res.foo).to.eql('called');
            });
        });
        describe('clear', function () {
            if (isReadonly) {
                it('should not change map', function () {
                    var jsonModel = { a: 1 };
                    var numbers = builders.aNumberMap(jsonModel);
                    numbers.clear();
                    chai_1.expect(numbers.toJSON()).to.eql(jsonModel);
                });
            }
            else {
                it('should remove all elements', function () {
                    var numbers = builders.aNumberMap({ a: 1 });
                    numbers.clear();
                    chai_1.expect(numbers.toJSON()).to.eql({});
                });
            }
        });
        describe('delete', function () {
            describe('when called with non-existing key', function () {
                it('should not change map ', function () {
                    var jsonModel = { a: 1 };
                    var numbers = builders.aNumberMap(jsonModel);
                    numbers.delete('b');
                    chai_1.expect(numbers.toJSON()).to.eql(jsonModel);
                });
                it('should return false', function () {
                    var numbers = builders.aNumberMap({ a: 1 });
                    chai_1.expect(numbers.delete('b')).to.eql(false);
                });
            });
            describe('when called with existing key', function () {
                if (isReadonly) {
                    it('should not change map', function () {
                        var jsonModel = { a: 1 };
                        var numbers = builders.aNumberMap(jsonModel);
                        numbers.delete('a');
                        chai_1.expect(numbers.toJSON()).to.eql(jsonModel);
                    });
                    it('should return false', function () {
                        var numbers = builders.aNumberMap({ a: 5 });
                        chai_1.expect(numbers.delete('a')).to.equal(false);
                    });
                }
                else {
                    it('should remove matching element', function () {
                        var numbers = builders.aNumberMap({ a: 1 });
                        numbers.delete('a');
                        chai_1.expect(numbers.toJSON()).to.eql({});
                    });
                    it('should support a mu object as an argument', function () {
                        usersMap.delete('userA');
                        chai_1.expect(usersMap.toJSON(false)).to.eql({ userB: userB });
                    });
                    it('should return true', function () {
                        var numbers = builders.aNumberMap({ a: 5 });
                        chai_1.expect(numbers.delete('a')).to.equal(true);
                    });
                }
            });
        });
        describe('entries', function () {
            it('should return an array of the map elements', function () {
                var array = mapEntries(builders.aNumberMap({ a: 1, b: 2 }));
                chai_1.expect(array).to.eql([['a', 1], ['b', 2]]);
            });
            it('should expose ' + typeOfObj(isReadonly) + ' entries', function () {
                var element = usersMap.entries()[0];
                chai_1.expect(element[1].$isReadOnly(), 'value is readonly').to.equal(isReadonly);
            });
        });
        describe('forEach', function () {
            it('should iterate over the map elements', function () {
                var ctx = { count: 0 };
                var map = builders.aNumberMap({ a: 1 });
                map.forEach(function (val, key, collection) {
                    this.count++;
                    chai_1.expect(val, 'value').to.equal(1);
                    chai_1.expect(key, 'key').to.equal('a');
                    chai_1.expect(collection, 'collection itself passed as 3rd argument').to.equal(map);
                    chai_1.expect(this, 'context argument').to.equal(ctx);
                }, ctx);
                chai_1.expect(ctx.count, 'how many iterations').to.eql(1);
            });
            it('should expose ' + typeOfObj(isReadonly) + ' entries', function () {
                usersMap.forEach(function (val, key) {
                    chai_1.expect(val.$isReadOnly(), 'value is readonly').to.equal(isReadonly);
                });
            });
        });
        describe('get', function () {
            it('should return stored value', function () {
                chai_1.expect(usersMap.get('userA'), 'get1').to.equal(userA);
                chai_1.expect(usersMap.get('userB'), 'get2').to.equal(userB);
            });
            it('should return undefined if no stored value', function () {
                chai_1.expect(usersMap.get('foo')).to.equal(undefined);
            });
            it('should return ' + typeOfObj(isReadonly) + ' entries', function () {
                chai_1.expect(usersMap.get('userA').$isReadOnly()).to.equal(isReadonly);
            });
        });
        describe('has', function () {
            it('should return true if a value exists for supplied key', function () {
                chai_1.expect(usersMap.has('userB')).to.equal(true);
                chai_1.expect(usersMap.has('userA')).to.equal(true);
            });
            it('should return false if no stored value', function () {
                chai_1.expect(usersMap.has('foo')).to.equal(false);
            });
        });
        describe('keys', function () {
            it('should return an array of the map keys', function () {
                var array = builders.aNumberMap({ a: 1, b: 2 }).keys();
                chai_1.expect(array).to.eql(['a', 'b']);
            });
        });
        describe('set', function () {
            if (isReadonly) {
                it('should not change map', function () {
                    var jsonModel = { a: 1 };
                    var numbers = builders.aNumberMap(jsonModel);
                    numbers.set('a', 5);
                    numbers.set('b', 5);
                    chai_1.expect(numbers.toJSON()).to.eql(jsonModel);
                });
            }
            else {
                it('should replace an existing element', function () {
                    var numbers = builders.aNumberMap({ a: 1 });
                    numbers.set('a', 5);
                    chai_1.expect(numbers.toJSON()).to.eql({ a: 5 });
                });
                it('should add an element if none exists', function () {
                    var numbers = builders.aNumberMap();
                    numbers.set('a', 42);
                    chai_1.expect(numbers.toJSON()).to.eql({ a: 42 });
                });
                it('should support a mu object as an argument', function () {
                    usersMap.set('userA', userB).set('userB', userB).set('userA', userA);
                    chai_1.expect(usersMap.toJSON(false)).to.eql({ userB: userB, userA: userA });
                });
                describe('lifecycleManager', function () {
                    var map, manager, child;
                    beforeEach(function () {
                        manager = new LifeCycleManager();
                        map = new mu.Es5Map.of(builders.UserType)({ child: child });
                        map.$setManager(manager);
                        child = new builders.UserType();
                        sinon.spy(child, '$setManager');
                    });
                    if (context.dirtyableElements) {
                        it('sets lifecycle manager in newly added elements', function () {
                            map.set('foo', child);
                            chai_1.expect(child.$setManager).to.have.been.calledWithExactly(manager);
                        });
                        it('does not try to set lifecycle manager in read-only newly added elements', function () {
                            map.set('foo', child.$asReadOnly());
                            chai_1.expect(child.$setManager).to.have.not.been.calledWithExactly(manager);
                        });
                    }
                });
            }
            it('should return the map', function () {
                var numbers = builders.aNumberMap({ a: 5 });
                chai_1.expect(numbers.set('a', 42)).to.equal(numbers);
            });
        });
        describe('values', function () {
            it('should return an array of the map values', function () {
                var array = builders.aNumberMap({ a: 1, b: 2 }).values();
                chai_1.expect(array).to.eql([1, 2]);
            });
            it('should expose ' + typeOfObj(isReadonly) + ' values', function () {
                var element = usersMap.values()[0];
                chai_1.expect(element.$isReadOnly(), 'value is readOnly').to.equal(isReadonly);
            });
        });
        describe('setValue', function () {
            it('with same state should not change or get dirty if values are not changed', function () {
                var log = test_drivers_1.getMobxLogOf(function () { return usersMap.setValue(usersMapInitialState); }, usersMap.__value__);
                chai_1.expect(log).to.be.empty;
            });
            describe('with a new state', function () {
                var newValue, log;
                beforeEach('change value', function () {
                    newValue = [['userA', userB], ['userB', userB]];
                    log = test_drivers_1.getMobxLogOf(function () { return usersMap.setValue(newValue); }, usersMap.__value__);
                });
                if (isReadonly) {
                    it('should not change', function () {
                        chai_1.expect(objEntries(usersMap.__value__.toJS()), 'entries array').to.eql(usersMapInitialState);
                    });
                    it('should not set map as dirty', function () {
                        chai_1.expect(log).to.be.empty;
                    });
                }
                else {
                    it('should only leave the new state', function () {
                        chai_1.expect(usersMap.entries()).to.eql(newValue);
                    });
                    it('should set map as dirty', function () {
                        chai_1.expect(log).not.to.be.empty;
                    });
                    describe('lifecycleManager', function () {
                        var map, manager, child;
                        beforeEach(function () {
                            manager = new LifeCycleManager();
                            map = new mu.Es5Map.of(builders.UserType)({ child: child });
                            map.$setManager(manager);
                            child = new builders.UserType();
                            sinon.spy(child, '$setManager');
                        });
                        if (context.dirtyableElements) {
                            it('sets lifecycle manager in newly added elements', function () {
                                map.setValue([['foo', child]]);
                                chai_1.expect(child.$setManager).to.have.been.calledWithExactly(manager);
                            });
                            it('does not try to set lifecycle manager in read-only newly added elements', function () {
                                map.setValue([['foo', child.$asReadOnly()]]);
                                chai_1.expect(child.$setManager).to.have.not.been.calledWithExactly(manager);
                            });
                        }
                    });
                }
            });
        });
        describe('setValueDeep', function () {
            it('with same state should not change or get dirty if values are not changed', function () {
                var log = test_drivers_1.getMobxLogOf(function () { return usersMap.setValue(usersMapInitialState); }, usersMap.__value__);
                chai_1.expect(log).to.be.empty;
                chai_1.expect(objEntries(usersMap.__value__.toJS()), 'entries array').to.eql(usersMapInitialState);
            });
            describe('with a new state', function () {
                var userC, newValue, log;
                beforeEach('change value', function () {
                    userC = new builders.UserType({ name: 'katanka' });
                    newValue = [['userA', userA], ['userB', userC], ['userC', userA]];
                    log = test_drivers_1.getMobxLogOf(function () { return usersMap.setValue(newValue); }, usersMap.__value__);
                });
                if (isReadonly) {
                    it('should not change', function () {
                        chai_1.expect(objEntries(usersMap.__value__.toJS()), 'entries array').to.eql(usersMapInitialState);
                    });
                    it('should not set map as dirty', function () {
                        chai_1.expect(log).to.be.empty;
                    });
                }
                else {
                    it('should change data of map to new state', function () {
                        chai_1.expect(usersMap.size).to.eql(3);
                        chai_1.expect(usersMap.toJSON(), 'data in map').to.eql(builders.aUserTypeMap(newValue).toJSON());
                    });
                    it('should not replace instances of existing mappings', function () {
                        chai_1.expect(usersMap.get('userA')).to.equal(userA);
                        chai_1.expect(usersMap.get('userB')).to.equal(userC);
                    });
                    it('should add new mappings if missing', function () {
                        chai_1.expect(usersMap.get('userC')).to.equal(userA);
                    });
                    it('should set map as dirty', function () {
                        chai_1.expect(log).not.to.be.empty;
                    });
                    describe('lifecycleManager', function () {
                        var map, manager, child;
                        beforeEach(function () {
                            manager = new LifeCycleManager();
                            map = new mu.Es5Map.of(builders.UserType)({ child: child });
                            map.$setManager(manager);
                            child = new builders.UserType();
                            sinon.spy(child, '$setManager');
                        });
                        if (context.dirtyableElements) {
                            it('sets lifecycle manager in newly added elements', function () {
                                map.setValueDeep([['foo', child]]);
                                chai_1.expect(child.$setManager).to.have.been.calledWithExactly(manager);
                            });
                            it('does not try to set lifecycle manager in read-only newly added elements', function () {
                                map.setValueDeep([['foo', child.$asReadOnly()]]);
                                chai_1.expect(child.$setManager).to.have.not.been.calledWithExactly(manager);
                            });
                        }
                    });
                }
            });
            if (!isReadonly) {
                describe('on a map with union type value', function () {
                    var map, cheese, oldValue, newValue;
                    beforeEach('change value', function () {
                        cheese = new builders.CheeseType({ name: 'brie' });
                        oldValue = [['a', userA], ['b', userB], ['c', userB]];
                        newValue = [['a', userA], ['b', cheese]];
                        map = builders.aUnionTypeMap(oldValue);
                    });
                    it('should change data of map to new state', function () {
                        map.setValueDeep(newValue);
                        chai_1.expect(map.size, 'map.size').to.eql(2);
                        chai_1.expect(map.toJSON(), 'data of map').to.eql(builders.aUnionTypeMap(newValue).toJSON());
                        chai_1.expect(map.keys(), 'data of keys of map').to.eql(['a', 'b']);
                    });
                    it('should not replace instances of existing mappings', function () {
                        map.setValueDeep(newValue);
                        chai_1.expect(map.get('a')).to.equal(userA);
                        chai_1.expect(map.get('b')).to.equal(cheese);
                    });
                    it('should remove new mappings if missing from new value', function () {
                        map.setValueDeep(newValue);
                        chai_1.expect(map.get('c')).to.be.undefined;
                    });
                    it('should set map as dirty', function () {
                        var log = test_drivers_1.getMobxLogOf(function () { return map.setValueDeep(newValue); }, map.__value__);
                        chai_1.expect(log).not.to.be.empty;
                    });
                });
                it('should create new value if value is read only', function () {
                    userA = new builders.UserType({ name: 'zaphod', age: 42 }).$asReadOnly();
                    var map = builders.aUnionTypeMap([['a', userA]]);
                    var log = test_drivers_1.getMobxLogOf(function () { return map.setValueDeep([['a', { child: { name: 'zagzag' } }]]); }, map.__value__);
                    chai_1.expect(log).not.to.be.empty;
                    chai_1.expect(userA).to.not.equal(map.get('a'));
                });
                it('complex children props should be set to default if not specified', function () {
                    var map = builders.aUnionTypeMap([['a', { name: 'zagzag' }]]);
                    map.setValueDeep([['a', { age: 1 }]]);
                    chai_1.expect(map.get('a').name).to.equal(new builders.UserType().name);
                });
            }
        });
    });
}
function typeOfObj(isReadonly) {
    return isReadonly ? 'read only' : 'mutable';
}
describe('Es5 Map', function () {
    testReadFunctionality(builders, false);
    testReadFunctionality(builders.asReadOnly(), true);
});
//# sourceMappingURL=instance.spec.js.map