"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var sinon = require("sinon");
var builders_1 = require("./builders");
var mu = require("../../src");
describe('Es5 Map', function () {
    describe('$setManager', function () {
        var map, manager;
        beforeEach(function () {
            manager = new mu.LifeCycleManager();
            var child = new builders_1.UserType();
            sinon.spy(child, '$setManager');
            map = new (mu.Es5Map.of(builders_1.UserType))({ child: child });
        });
        it('with existing different manager does not change the manager and reports error', function () {
            map.__lifecycleManager__ = manager;
            chai_1.expect(function () { return map.$setManager(new mu.LifeCycleManager()); }).to.report({ level: /error/ });
            chai_1.expect(map.__lifecycleManager__, 'container manager').to.equal(manager);
        });
        it('when no existing manager changes the manager field', function () {
            chai_1.expect(function () { return map.$setManager(manager); }).not.to.report({ level: /error/ });
            chai_1.expect(map.__lifecycleManager__, 'container manager').to.equal(manager);
        });
        it('when no existing manager changes the manager field of child elements', function () {
            chai_1.expect(function () { return map.$setManager(manager); }).not.to.report({ level: /error/ });
            chai_1.expect(map.get('child').$setManager).to.have.been.calledWithExactly(manager);
        });
        it('in readonly form does not report an error', function () {
            chai_1.expect(function () { return map.$asReadOnly().$setManager(manager); }).to.not.report({ level: /error/ });
        });
        it('with invalid type reports an error', function () {
            chai_1.expect(function () { return map.$setManager({}); }).to.report({ level: /error/ });
        });
    });
    describe('regression with observable=false', function () {
        before(function () {
            mu.config.observable = false;
        });
        after(function () {
            mu.config.observable = true;
        });
        it('handles set value deep', function () {
            var map = new (mu.Es5Map.of(builders_1.UserType))({});
            map.set('1', new builders_1.UserType({ name: 'Amir' }));
            map.set('2', new builders_1.UserType({ name: 'Doron' }));
            map.setValue({
                '2': {
                    'age': 33
                }
            });
            chai_1.expect(map.toJSON()).to.eql({
                '2': {
                    'name': new builders_1.UserType().name,
                    'age': 33
                }
            });
        });
    });
});
require('./mutable/instance.spec');
require('./type-edge-cases.spec');
//# sourceMappingURL=map.spec.js.map