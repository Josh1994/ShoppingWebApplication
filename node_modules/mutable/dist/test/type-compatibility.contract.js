"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var validation_1 = require("../src/core/validation");
function typeCompatibilityTest(typeFactory, isPrimitive) {
    describe('should be compatible', function () {
        it('with itself', function () {
            var type = typeFactory();
            chai_1.expect(type).to.satisfy(validation_1.isAssignableFrom.bind(null, type));
        });
        it('with types of same schema', function () {
            var type1 = typeFactory();
            var type2 = typeFactory();
            chai_1.expect(type1).to.satisfy(validation_1.isAssignableFrom.bind(null, type2));
        });
        describe('with results of .create()', function () {
            it('of itself', function () {
                var type = typeFactory();
                var instance = type.create();
                chai_1.expect(instance).to.satisfy(type.validateType.bind(type));
            });
            it('of same schema', function () {
                var type1 = typeFactory();
                var type2 = typeFactory();
                var instance = type1.create();
                chai_1.expect(instance).to.satisfy(type2.validateType.bind(type2));
            });
        });
        if (!isPrimitive) {
            describe('with results of "new" keyword', function () {
                it('of itself', function () {
                    var type = typeFactory();
                    var instance = new type();
                    chai_1.expect(instance).to.satisfy(type.validateType.bind(type));
                });
                it('of same schema', function () {
                    var type1 = typeFactory();
                    var type2 = typeFactory();
                    var instance = new type1();
                    chai_1.expect(instance).to.satisfy(type2.validateType.bind(type2));
                });
            });
        }
    });
}
exports.typeCompatibilityTest = typeCompatibilityTest;
//# sourceMappingURL=type-compatibility.contract.js.map