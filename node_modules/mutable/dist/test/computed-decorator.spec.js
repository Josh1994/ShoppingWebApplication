"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var sinon = require("sinon");
var mu = require("../src");
var mobx_1 = require("mobx");
var Data = (function (_super) {
    __extends(Data, _super);
    function Data() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Data;
}(mu.Object));
var DataGetter = (function () {
    function DataGetter() {
    }
    DataGetter.prototype.getFooBar = function () {
        this.onFoobar();
        return this.data.foo + this.data.bar;
    };
    DataGetter.prototype.onFoobar = function () {
    };
    return DataGetter;
}());
function makeObjectFromClass(dataClazz, dataGetterClazz) {
    var Data_ = (function (_super) {
        __extends(Data_, _super);
        function Data_() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return Data_;
    }(dataClazz));
    var DefinedData = mu.define('MyData', {
        spec: function (_) {
            return {
                foo: mu.String,
                bar: mu.String
            };
        }
    }, undefined, Data_);
    var result = new dataGetterClazz();
    result.data = new DefinedData();
    result.onFoobar = sinon.spy();
    return result;
}
var TestActions = (function () {
    function TestActions(getter, actionImpl) {
        this.getter = getter;
        this.actionImpl = actionImpl;
        this.numInvocations = 4;
    }
    TestActions.prototype.autorun = function () {
        var _this = this;
        // will run once now and again when .foo or .bar change
        this.disposer1 = mobx_1.autorun(function () {
            _this.actionImpl();
            _this.actionImpl();
        });
        this.disposer2 = mobx_1.autorun(function () {
            _this.actionImpl();
            _this.actionImpl();
        });
    };
    TestActions.prototype.dispose = function () {
        this.disposer1();
        this.disposer2();
    };
    return TestActions;
}());
describe('computed annotation', function () {
    describe('(Baseline - without @computed)', function () {
        it('should not cache results when run in an action', function () {
            var getter = makeObjectFromClass(Data, DataGetter);
            var tester = new TestActions(getter, function () { return getter.getFooBar(); });
            tester.autorun();
            try {
                chai_1.expect(getter.onFoobar).to.have.callCount(1 * tester.numInvocations);
                getter.data.foo = '7';
                chai_1.expect(getter.onFoobar).to.have.callCount(2 * tester.numInvocations);
                getter.data.bar = '7';
                chai_1.expect(getter.onFoobar).to.have.callCount(3 * tester.numInvocations);
            }
            finally {
                tester.dispose();
            }
        });
    });
    describe('on a class consuming Mutable object', function () {
        var getter;
        beforeEach(function () {
            var ComputedGetter = (function (_super) {
                __extends(ComputedGetter, _super);
                function ComputedGetter() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                ComputedGetter.prototype.getFooBar = function () {
                    return _super.prototype.getFooBar.call(this);
                };
                return ComputedGetter;
            }(DataGetter));
            __decorate([
                mu.computed
            ], ComputedGetter.prototype, "getFooBar", null);
            getter = makeObjectFromClass(Data, ComputedGetter);
        });
        it('should return the correct result', function () {
            getter.data.foo = '1';
            getter.data.bar = '2';
            chai_1.expect(getter.getFooBar()).to.eql('12');
        });
        it('should cache results when run in an action', function () {
            var tester = new TestActions(getter, function () { return getter.getFooBar(); });
            tester.autorun();
            try {
                chai_1.expect(getter.onFoobar).to.have.callCount(1);
                getter.data.foo = '7';
                chai_1.expect(getter.onFoobar).to.have.callCount(2);
                getter.data.bar = '7';
                chai_1.expect(getter.onFoobar).to.have.callCount(3);
            }
            finally {
                tester.dispose();
            }
        });
    });
});
//# sourceMappingURL=computed-decorator.spec.js.map