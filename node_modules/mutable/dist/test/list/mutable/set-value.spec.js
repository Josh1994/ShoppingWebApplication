"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var mu = require("../../../src");
var builders_1 = require("../builders");
var modify_test_suite_1 = require("./modify-test-suite");
var reports_1 = require("../../../test-kit/test-drivers/reports");
function complexSubTypeTests() {
    it('List should allow setting data with json', function () {
        var address = new builders_1.AddressType({ address: 'gaga' });
        var list = mu.List.of(builders_1.AddressType).create([address]);
        list.setValue([{ code: 5 }]);
        chai_1.expect(list.at(0)).to.be.instanceOf(builders_1.AddressType);
        chai_1.expect(list.at(0).code).to.be.eql(5);
        chai_1.expect(list.at(0).address).to.be.eql('');
        chai_1.expect(list.at(0)).to.not.be.eql(address);
    });
    it('List should allow adding data with json', function () {
        var list = mu.List.of(builders_1.AddressType).create();
        list.setValue([{ code: 5 }]);
        chai_1.expect(list.at(0)).to.be.instanceOf(builders_1.AddressType);
        chai_1.expect(list.at(0).code).to.be.eql(5);
    });
    it("report correct path for field type mismatch in deep field", function () {
        var aList = builders_1.aVeryCompositeContainerList([{}, {}]);
        chai_1.expect(function () { return aList.setValue([{}, { child1: { user: { age: "666" } } }]); })
            .to.report(reports_1.ERROR_FIELD_MISMATCH_IN_LIST_METHOD('setValue', 'List<VeryCompositeContainer>[1].child1.user.age', 'number', 'string'));
    });
}
modify_test_suite_1.default('setValue', { complexSubTypeTests: complexSubTypeTests });
//# sourceMappingURL=set-value.spec.js.map