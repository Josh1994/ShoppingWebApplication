"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var mu = require("../../../src");
var builders_1 = require("../builders");
var reports_1 = require("../../../test-kit/test-drivers/reports");
describe('List', function () {
    describe('mu instance', function () {
        describe('reverse', function () {
            it('should reverse the order of elements in a List', function () {
                var numberList = builders_1.aNumberList();
                var newList = numberList.reverse();
                chai_1.expect(newList).to.be.instanceOf(mu.List);
                for (var i = 0; i < numberList.length; i++) {
                    chai_1.expect(numberList.at(i)).to.equal(newList.at(newList.length - i - 1));
                }
            });
        });
        describe('sort', function () {
            it('should return a sorted copy of the list but not change the original', function () {
                var stringList = builders_1.aStringList(['2', '1', '3']);
                var numberList = builders_1.aNumberList([2, 1, 3]);
                function reverseCompareNumbers(a, b) {
                    return b - a;
                }
                var sortedStringList = stringList.sort().toJSON();
                var sortedNumberList = numberList.sort().toJSON();
                var funkySortNumberList = numberList.sort(reverseCompareNumbers).toJSON();
                chai_1.expect(sortedStringList, 'sorting with native string comparator').to.eql(['1', '2', '3']);
                chai_1.expect(sortedNumberList, 'sorting with native number comparator').to.eql([1, 2, 3]);
                chai_1.expect(funkySortNumberList, 'sorting with custom comparator').to.eql([3, 2, 1]);
                chai_1.expect(stringList.toJSON(), 'original string list unchanged').to.eql(['2', '1', '3']);
                chai_1.expect(numberList.toJSON(), 'original number list unchanged').to.eql([2, 1, 3]);
            });
        });
        describe('splice', function () {
            it('changes the content of a List by removing existing elements and/or adding new elements', function () {
                var numberList = builders_1.aNumberList([1, 2, 3, 4]);
                var removedItems = numberList.splice(1, 2, 7, 10, 13);
                chai_1.expect(numberList.length).to.equal(5);
                chai_1.expect(numberList.at(0)).to.equal(1);
                chai_1.expect(numberList.at(1)).to.equal(7);
                chai_1.expect(numberList.at(2)).to.equal(10);
                chai_1.expect(numberList.at(3)).to.equal(13);
                chai_1.expect(numberList.at(4)).to.equal(4);
                chai_1.expect(removedItems.length).to.equal(2);
                chai_1.expect(removedItems[0]).to.equal(2);
                chai_1.expect(removedItems[1]).to.equal(3);
            });
            it('Should wrap items for none immutable data (like custom types)', function () {
                var arr = mu.List.of(builders_1.UserType).create([{ name: 'aag' }, { name: 'dag' }]);
                arr.splice(0, 1, { name: 'zag' });
                chai_1.expect(arr.at(1)).to.be.instanceOf(builders_1.UserType);
                chai_1.expect(arr.at(0).name).to.equal('zag');
                chai_1.expect(arr.at(1).name).to.equal('dag');
            });
            // todo: add another test with _type annotation
            it("report correct path for field type mismatch in deep field", function () {
                var numberList = builders_1.aVeryCompositeContainerList([{}, {}, {}, {}]);
                chai_1.expect(function () { return numberList.splice(2, 1, {}, { child1: { user: { age: "666" } } }); })
                    .to.report(reports_1.ERROR_FIELD_MISMATCH_IN_LIST_METHOD('splice', 'List<VeryCompositeContainer>[3].child1.user.age', 'number', 'string'));
            });
            describe('lifecycleManager', function () {
                var arr, manager, child;
                beforeEach(function () {
                    manager = new LifeCycleManager();
                    arr = mu.List.of(builders_1.UserType).create([new builders.UserType(), new builders.UserType(), new builders.UserType()]);
                    arr.$setManager(manager);
                    child = new builders.UserType();
                    sinon.spy(child, '$setManager');
                });
                if (context.dirtyableElements) {
                    it('sets lifecycle manager in newly added elements', function () {
                        arr.splice(1, 2, child);
                        chai_1.expect(child.$setManager).to.have.been.calledWithExactly(manager);
                    });
                    it('does not try to set lifecycle manager in read-only newly added elements', function () {
                        arr.splice(1, 2, child.$asReadOnly());
                        chai_1.expect(child.$setManager).to.have.not.been.calledWithExactly(manager);
                    });
                }
            });
        });
    });
});
//# sourceMappingURL=in-place-mutations.spec.js.map