"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var mu = require("../../../src");
var src_1 = require("../../../src");
var builders_1 = require("../builders");
var test_drivers_1 = require("../../../test-kit/test-drivers");
var generic_types_1 = require("../../../src/core/generic-types");
function modifyTestSuite(command, _a) {
    var complexSubTypeTests = _a.complexSubTypeTests;
    describe("List " + command, function () {
        describe('lifecycleManager', function () {
            var arr, manager, child;
            beforeEach(function () {
                manager = new src_1.LifeCycleManager();
                arr = mu.List.of(builders_1.UserType).create([new builders.UserType(), new builders.UserType(), new builders.UserType()]);
                arr.$setManager(manager);
                child = new builders.UserType();
                sinon.spy(child, '$setManager');
            });
            if (context.dirtyableElements) {
                it('sets lifecycle manager in newly added elements', function () {
                    arr[command]([child]);
                    chai_1.expect(child.$setManager).to.have.been.calledWithExactly(manager);
                });
                it('does not try to set lifecycle manager in read-only newly added elements', function () {
                    arr[command]([child.$asReadOnly()]);
                    chai_1.expect(child.$setManager).to.have.not.been.calledWithExactly(manager);
                });
            }
        });
        it('should not get dirty if values are not changed', function () {
            var numberList = builders_1.aNumberList([1]);
            var log = test_drivers_1.getMobxLogOf(function () { return numberList[command]([1]); });
            chai_1.expect(log).to.be.empty;
        });
        it("accepts a vanilla JS List", function () {
            var list = builders_1.anEmptyList();
            chai_1.expect(list.length).to.equal(0);
            list[command]([17, 42]);
            chai_1.expect(list.length).to.equal(2);
            chai_1.expect(list.at(0)).to.equal(17);
            chai_1.expect(list.at(1)).to.equal(42);
        });
        describe('replaces the value', function () {
            function aTestType(values) {
                var TestType = test_drivers_1.aDataTypeWithSpec({
                    names: mu.List.of(mu.String).withDefault(values)
                }, "TestType");
                return new TestType();
            }
            it("with mu object containing mu List of string", function () {
                var testType = aTestType(["Beyonce", "Rihanna"]);
                chai_1.expect(testType.names.length).to.equal(2);
                chai_1.expect(testType.names.at(0)).to.equal("Beyonce");
                chai_1.expect(testType.names.at(1)).to.equal("Rihanna");
                testType[command]({
                    names: builders_1.aStringList(["John", "Paul", "George"])
                });
                chai_1.expect(testType.names.length).to.equal(3);
                chai_1.expect(testType.names.at(0)).to.equal("John");
                chai_1.expect(testType.names.at(1)).to.equal("Paul");
                chai_1.expect(testType.names.at(2)).to.equal("George");
            });
            it("with JSON object containg JSON List of string", function () {
                var testType = aTestType(["Beyonce", "Rihanna"]);
                testType[command]({ names: ["John", "Paul", "George"] });
                chai_1.expect(testType.names.length).to.equal(3);
                chai_1.expect(testType.names.at(0)).to.equal("John");
                chai_1.expect(testType.names.at(1)).to.equal("Paul");
                chai_1.expect(testType.names.at(2)).to.equal("George");
            });
        });
        it("with JSON object containg empty List", function () {
            var TestType1 = test_drivers_1.aDataTypeWithSpec({ gaga: mu.String }, "TestType1");
            var TestType2 = test_drivers_1.aDataTypeWithSpec({ baga: mu.String }, "TestType2");
            var TestType3 = test_drivers_1.aDataTypeWithSpec({
                gagot: mu.List.of(TestType1, TestType2).withDefault([{}, {}])
            }, "TestType3");
            var testObj = new TestType3();
            testObj[command]({ gagot: [] });
            chai_1.expect(testObj.gagot.length).to.equal(0);
            chai_1.expect(testObj.gagot.at(0)).to.equal(undefined);
        });
        it("with List with compatible but different options", function () {
            var TestType1 = test_drivers_1.aDataTypeWithSpec({ gaga: mu.String }, "TestType1");
            var TestType2 = test_drivers_1.aDataTypeWithSpec({ baga: mu.String }, "TestType2");
            var TestType3 = test_drivers_1.aDataTypeWithSpec({
                gagot: mu.List.of(TestType1, TestType2).withDefault([{}, {}, {}])
            }, "TestType3");
            var TestType4 = test_drivers_1.aDataTypeWithSpec({
                gagot: mu.List.of(TestType2).withDefault([{}])
            }, "TestType3");
            var testObj = new TestType3();
            var test2Obj = new TestType4();
            testObj[command]({ gagot: test2Obj.gagot });
            chai_1.expect(testObj.gagot.length).to.equal(1);
        });
        describe('on a List with complex subtype', function () {
            it('should keep mu objects passed to it that fit its subtypes', function () {
                var mixedList = mu.List.of(generic_types_1.either(builders_1.UserType, builders_1.AddressType)).create([]);
                var newUser = new builders_1.UserType();
                var newAddress = new builders_1.AddressType();
                mixedList[command]([newUser, newAddress]);
                chai_1.expect(mixedList.at(0)).to.eql(newUser);
                chai_1.expect(mixedList.at(1)).to.eql(newAddress);
            });
            it('should set the new item lifecycle manager when creating new from JSON', function () {
                var mockManager = new src_1.LifeCycleManager();
                var mixedList = mu.List.of(builders_1.AddressType).create([]);
                mixedList.$setManager(mockManager);
                mixedList[command]([{ code: 5 }]);
                chai_1.expect(mixedList.at(0).__lifecycleManager__).to.be.eql(mockManager);
            });
            complexSubTypeTests && complexSubTypeTests();
        });
    });
}
exports.default = modifyTestSuite;
//# sourceMappingURL=modify-test-suite.js.map