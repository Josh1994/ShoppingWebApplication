"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var mu = require("../../../src");
var src_1 = require("../../../src");
var builders_1 = require("../builders");
var test_drivers_1 = require("../../../test-kit/test-drivers");
var modify_test_suite_1 = require("./modify-test-suite");
function complexSubTypeTests() {
    it('single subtype List should allow setting data with json', function () {
        var address = new builders_1.AddressType({ address: 'gaga' });
        var list = mu.List.of(builders_1.AddressType).create([address]);
        var log = test_drivers_1.getMobxLogOf(function () { return list.setValueDeep([{ code: 5 }]); });
        chai_1.expect(list.at(0)).to.be.instanceOf(builders_1.AddressType);
        chai_1.expect(list.at(0).code).to.be.eql(5);
        chai_1.expect(list.at(0).address).to.be.eql('');
        chai_1.expect(list.at(0)).to.be.equal(address);
        chai_1.expect(log.filter(function (change) { return change.object === list.__value__; })).to.be.empty;
        chai_1.expect(log.filter(function (change) { return change.object === list.at(0); })).not.to.be.empty;
    });
    it('single not be dirty if nothing changed', function () {
        var address = new builders_1.AddressType({ address: 'gaga' });
        var list = mu.List.of(builders_1.AddressType).create([address]);
        var log = test_drivers_1.getMobxLogOf(function () { return list.setValueDeep([list.at(0).toJSON()]); });
        chai_1.expect(log).to.be.empty;
    });
    it('should keep mu instances', function () {
        var newUser = new builders_1.UserType();
        var newAddress = new builders_1.AddressType();
        var mixedList = mu.List.of(src_1.either(builders_1.UserType, builders_1.AddressType)).create([newUser, newAddress]);
        var log = test_drivers_1.getMobxLogOf(function () { return mixedList.setValueDeep([{ age: 65 }, { code: 999 }]); });
        chai_1.expect(mixedList.at(0)).to.equal(newUser);
        chai_1.expect(mixedList.at(1)).to.equal(newAddress);
        chai_1.expect(log.filter(function (change) { return change.object === mixedList.__value__; })).to.be.empty;
        chai_1.expect(log.filter(function (change) { return change.object === mixedList.at(0); })).not.to.be.empty;
        chai_1.expect(log.filter(function (change) { return change.object === mixedList.at(1); })).not.to.be.empty;
    });
    it('should replace item for mismatch type', function () {
        var aUser = new builders_1.UserType();
        var anAddress = new builders_1.AddressType();
        var mixedList = mu.List.of(src_1.either(builders_1.UserType, builders_1.AddressType)).create([aUser, anAddress]);
        var log = test_drivers_1.getMobxLogOf(function () { return mixedList.setValueDeep([{ _type: 'Address', age: 65 }, { code: 999 }]); });
        chai_1.expect(mixedList.at(0)).to.be.an.instanceOf(builders_1.AddressType);
        chai_1.expect(mixedList.at(1)).to.equal(anAddress);
        chai_1.expect(log.filter(function (change) { return change.object === mixedList.__value__; })).not.to.be.empty;
        chai_1.expect(log.filter(function (change) { return change.object === aUser; })).to.be.empty;
        chai_1.expect(log.filter(function (change) { return change.object === mixedList.at(1); })).not.to.be.empty;
    });
    it('should create new item if item is read only', function () {
        var address = new builders_1.AddressType({ address: 'gaga' });
        var list = mu.List.of(builders_1.AddressType).create([address.$asReadOnly()]);
        var log = test_drivers_1.getMobxLogOf(function () { return list.setValueDeep([{ code: 5 }]); });
        chai_1.expect(list.at(0)).to.not.be.equal(address);
        chai_1.expect(log.filter(function (change) { return change.object === list.__value__; })).not.to.be.empty;
        chai_1.expect(log.filter(function (change) { return change.object === list.at(0); })).not.to.be.empty;
        chai_1.expect(log.filter(function (change) { return change.object === address; })).to.be.empty;
    });
}
modify_test_suite_1.default('setValueDeep', { complexSubTypeTests: complexSubTypeTests });
//# sourceMappingURL=set-value-deep.spec.js.map