"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var mu = require("../../src");
var builders_1 = require("./builders");
var sinon = require("sinon");
describe('List', function () {
    describe('as a field', function () {
        var container;
        beforeEach(function () {
            var Container = mu.define('Container', { spec: function () { return ({
                    users: mu.List.of(mu.String)
                }); } });
            container = new Container();
        });
        it('reject assignment of native array', function () {
            chai_1.expect(function () { container.users = []; }).to.report({ level: 'error' });
            chai_1.expect(container.users.length).to.eql(0);
        });
    });
    describe('$setManager', function () {
        var list, manager;
        beforeEach(function () {
            manager = new mu.LifeCycleManager();
            var child = new builders_1.UserType();
            sinon.spy(child, '$setManager');
            list = mu.List.of(builders_1.UserType).create([child]);
        });
        it('with existing different manager does not change the manager and reports error', function () {
            list.__lifecycleManager__ = manager;
            chai_1.expect(function () { return list.$setManager(new mu.LifeCycleManager()); }).to.report({ level: /error/ });
            chai_1.expect(list.__lifecycleManager__, 'container manager').to.equal(manager);
        });
        it('when no existing manager changes the manager field', function () {
            chai_1.expect(function () { return list.$setManager(manager); }).not.to.report({ level: /error/ });
            chai_1.expect(list.__lifecycleManager__, 'container manager').to.equal(manager);
        });
        it('when no existing manager changes the manager field of child elements', function () {
            chai_1.expect(function () { return list.$setManager(manager); }).not.to.report({ level: /error/ });
            chai_1.expect(list.at(0).$setManager).to.have.been.calledWithExactly(manager);
        });
        it('in readonly form does not report an error', function () {
            chai_1.expect(function () { return list.$asReadOnly().$setManager(manager); }).to.not.report({ level: /error/ });
        });
        it('with invalid type reports an error', function () {
            chai_1.expect(function () { return list.$setManager({}); }).to.report({ level: /error/ });
        });
    });
});
require('./mutable/instance.spec');
require('./mutable/item-read.spec');
require('./mutable/views.spec');
require('./mutable/functional-programming.spec');
require('./mutable/set-value.spec');
require('./mutable/item-mutations.spec');
require('./mutable/in-place-mutations.spec');
//# sourceMappingURL=list.spec.js.map