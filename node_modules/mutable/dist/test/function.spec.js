"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var mu = require("../src");
var test_kit_1 = require("../test-kit");
var chai_1 = require("chai");
var sinon = require("sinon");
/**
 * babel inherit implementation
 * // TODO move to test kit, test extension of all types
 */
describe('Function data', function () {
    it('wrapped function should execute properly', function () {
        var typedFunction = mu.Function.create(function myfunc() {
            return 1;
        });
        chai_1.expect(typedFunction()).to.equal(1, 'wrapped function should execute properly');
    });
    it('Function.withDefault should return a default function', function () {
        var typedFunction = mu.Function.withDefault(function myfunc() {
            return 1;
        });
        chai_1.expect(typedFunction.defaults()()).to.equal(1, 'wrapped function should execute properly');
    });
    it('is extendible', function () {
        var DerivedFunc = test_kit_1.default.drivers.inheritBabel(mu.Function);
        DerivedFunc.of = function of(DataType) {
            var WithDataSpec = this.withDefault(undefined, undefined, { dataType: DataType });
            return WithDataSpec;
        };
        DerivedFunc.id = 'DerivedFunc';
        var innerSpy = sinon.spy();
        var StringDerivedFunc = DerivedFunc.of(mu.String);
        var func = new StringDerivedFunc(innerSpy);
        chai_1.expect(func).not.to.throw();
        chai_1.expect(innerSpy).to.have.been.calledOnce;
        chai_1.expect(StringDerivedFunc.validate(func) || StringDerivedFunc.validateType(func)).to.be.true;
    });
});
//# sourceMappingURL=function.spec.js.map