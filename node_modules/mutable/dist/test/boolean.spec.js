"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var mu = require("../src");
var test_drivers_1 = require("../test-kit/test-drivers");
describe('Boolean Type', function () {
    var Boolean = mu.Boolean;
    describe('js value is strictly boolean', function () {
        var BooleanValues = test_drivers_1.aDataTypeWithSpec({
            yes: mu.Boolean.withDefault(true),
            no: mu.Boolean.withDefault(false),
            default: mu.Boolean
        }, 'BooleanValues');
        var booleans;
        before(function () { return booleans = new BooleanValues(); });
        it('should resolve to javascript boolean', function () {
            chai_1.expect(booleans.yes).to.be.a('boolean');
            chai_1.expect(booleans.no).to.be.a('boolean');
            chai_1.expect(booleans.default).to.be.a('boolean');
        });
        it('should resolve to javascript boolean with the right value', function () {
            // equals means ===
            chai_1.expect(booleans.yes).to.equals(true);
            chai_1.expect(booleans.no).to.equals(false);
            chai_1.expect(booleans.default).to.equals(false);
        });
    });
    xdescribe('lenient input', function () {
        var BooleanValues;
        var booleans;
        before(function () {
            BooleanValues = test_drivers_1.aDataTypeWithSpec({
                yes: mu.Boolean.withDefault(1),
                no: mu.Boolean.withDefault(0)
            }, 'BooleanValues');
            booleans = new BooleanValues();
        });
        it('should resolve to javascript boolean', function () {
            chai_1.expect(booleans.yes).to.be.a('boolean');
            chai_1.expect(booleans.no).to.be.a('boolean');
        });
        it('should resolve to javascript boolean with the right value', function () {
            // equals means ===
            chai_1.expect(booleans.yes).to.equals(true);
            chai_1.expect(booleans.no).to.equals(false);
        });
        it('should be equal to different creation methods', function () {
            // equals means ===
            chai_1.expect(booleans).to.eql(new BooleanValues({ yes: true, no: false }));
            chai_1.expect(booleans).to.eql(new BooleanValues({ yes: 'fff', no: '' }));
        });
    });
});
//# sourceMappingURL=boolean.spec.js.map