"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _ = require("lodash");
var escalate_1 = require("escalate");
var object_1 = require("./object");
var base_1 = require("../core/base");
var validation_1 = require("../core/validation");
var MAILBOX = escalate_1.getMailBox('mutable.Reference');
var Reference = (function (_super) {
    __extends(Reference, _super);
    function Reference() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    // allow any object as long as it adhers to the entire schema
    Reference.allowPlainVal = function (value, errorDetails) {
        var _this = this;
        if (validation_1.validateNullValue(this, value)) {
            return true;
        }
        else {
            var result = _.isObject(value)
                && Object.keys(this._spec).every(function (key) {
                    var fieldErrorDetails = errorDetails && _.defaults({ path: errorDetails.path + "." + key }, errorDetails);
                    return _this._spec[key].validateType(value[key]) || _this._spec[key].allowPlainVal(value[key], fieldErrorDetails);
                });
            return result;
        }
    };
    Reference.wrapValue = function (refVal, spec, options, errorContext) {
        var _this = this;
        var isValid = Object.keys(spec).every(function (key) {
            if (refVal[key] === undefined) {
                MAILBOX.error(_this.id + " cannot accept value with missing field \"" + key + "\"");
                return false;
            }
            else if (!spec[key].validateType(refVal[key])) {
                MAILBOX.error(_this.id + " field \"" + key + "\" cannot accept value with mismatched type");
                return false;
            }
            return true;
        });
        return isValid ? refVal : {};
    };
    Reference.cloneValue = function (value) { return value; };
    return Reference;
}(object_1.MuObject));
exports.default = Reference;
base_1.defineNonPrimitive('Reference', Reference);
//# sourceMappingURL=reference.js.map