"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var escalate_1 = require("escalate");
var types_1 = require("../types");
var MAILBOX = escalate_1.getMailBox('mutable.lifecycle');
var LifeCycleManager = (function () {
    function LifeCycleManager() {
        var _this = this;
        this.__readOnly__ = false;
        this.__tracked__ = true;
        // we need to filter calls to reportObserved of the state tree when this.__tracked__ is false.
        // create an unbound wrappingReportObserved function that has this instance of LifeCycleManager in its closure.
        this.$wrappingReportObserved = (function () {
            var managerInstance = _this;
            return function wrappingReportObserved() {
                if (managerInstance.__tracked__) {
                    this.$mutableOriginalReportObserved.apply(this, arguments);
                }
            };
        })();
        this.$bindAtom = function (atom) {
            if (!atom.$mutableOriginalReportObserved) {
                atom.$mutableOriginalReportObserved = atom.reportObserved;
                atom.reportObserved = _this.$wrappingReportObserved;
            }
        };
    }
    LifeCycleManager.prototype.allowChange = function () {
        this.__readOnly__ = false;
    };
    LifeCycleManager.prototype.forbidChange = function () {
        this.__readOnly__ = true;
    };
    LifeCycleManager.prototype.isDirtyable = function () {
        return !this.__readOnly__;
    };
    LifeCycleManager.prototype.alowTracking = function () {
        this.__tracked__ = true;
    };
    LifeCycleManager.prototype.forbidTracking = function () {
        this.__tracked__ = false;
    };
    return LifeCycleManager;
}());
exports.LifeCycleManager = LifeCycleManager;
// called when a new lifecycle manager is introduced to this object
function setManager(lifecycleManager) {
    if (lifecycleManager) {
        if (this.__lifecycleManager__ && this.__lifecycleManager__ !== lifecycleManager) {
            MAILBOX.error('Moving mutable private state instances between containers');
        }
        else if (lifecycleManager instanceof LifeCycleManager) {
            this.__lifecycleManager__ = lifecycleManager;
            if (this.$atomsIterator) {
                this.$atomsIterator(lifecycleManager.$bindAtom);
            }
            if (this.$dirtyableElementsIterator) {
                this.$dirtyableElementsIterator(setManagerToDirtyableElement);
            }
        }
        else {
            MAILBOX.error('Attempt to set wrong type of lifecycle manager');
        }
    }
}
exports.setManager = setManager;
function setManagerToDirtyableElement(container, element) {
    optionalSetManager(element, container.__lifecycleManager__);
}
// used by setters to determine if changes are allowed to the dirty flag
function isDirtyable() {
    return !this.__isReadOnly__ && (!this.__lifecycleManager__ || this.__lifecycleManager__.isDirtyable());
}
exports.isDirtyable = isDirtyable;
function optionalSetManager(itemValue, lifeCycle) {
    if (types_1.isMutable(itemValue) && !itemValue.$isReadOnly()) {
        itemValue.$setManager(lifeCycle);
    }
}
exports.optionalSetManager = optionalSetManager;
//# sourceMappingURL=lifecycle.js.map