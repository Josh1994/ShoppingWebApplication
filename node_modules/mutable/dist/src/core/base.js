"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var escalate_1 = require("escalate");
var lifecycle_1 = require("./lifecycle");
var any_1 = require("./../data-types/any");
var utils_1 = require("../utils");
var validation_1 = require("./validation");
var type_match_1 = require("./type-match");
var default_object_1 = require("./../objects/default-object");
var MAILBOX = escalate_1.getMailBox('mutable.MuBase');
function createReadOnly(source) {
    var result = Object.create(source);
    result.__isReadOnly__ = true;
    return result;
}
var dataCounter = 0;
function generateId() {
    return dataCounter++;
}
var MuBase = (function (_super) {
    __extends(MuBase, _super);
    function MuBase(value, options, errorContext) {
        var _this = _super.call(this) || this;
        _this.__ctor__ = _this.constructor;
        _this.__isReadOnly__ = false;
        _this.$setManager = lifecycle_1.setManager;
        _this.$isDirtyable = lifecycle_1.isDirtyable;
        errorContext = errorContext || _this.__ctor__.createErrorContext('Type constructor error', 'error');
        if (MuBase === utils_1.getPrimeType(_this.__ctor__)) {
            MAILBOX.post(errorContext.level, errorContext.entryPoint + ": \"" + errorContext.path + "\" Instantiating the base type is not allowed. You should extend it instead.");
        }
        else if (MuBase.uniqueId === utils_1.getPrimeType(_this.__ctor__).uniqueId) {
            MAILBOX.post(errorContext.level, errorContext.entryPoint + ": \"" + errorContext.path + "\" \"" + _this.__ctor__.name + "\" is not inherited correctly. Did you remember to import core3-runtime?");
        }
        _this.__readOnlyInstance__ = createReadOnly(_this);
        _this.__readWriteInstance__ = _this;
        _this.__options__ = options;
        _this.__value__ = _this.__ctor__.makeValue((value === undefined) ? _this.__ctor__.defaults() : value, options, errorContext);
        return _this;
    }
    // TODO: move out
    MuBase.createErrorContext = function (entryPoint, level) {
        return {
            level: level,
            entryPoint: entryPoint,
            path: this.id
        };
    };
    /**
     * @param value any value
     * @returns {*} true if value is a legal value for this type, falsy otherwise
     */
    // TODO: move out
    MuBase.validateType = function (value) {
        return validation_1.validateValue(this, value);
    };
    MuBase.validate = function (value) {
        return validation_1.validateNullValue(this, value) || !!(value && typeof value === 'object');
    };
    MuBase.create = function (value, options, errorContext) {
        if (MuBase === utils_1.getPrimeType(this)) {
            return default_object_1.defaultObject((typeof this.defaults === 'function') ? this.defaults() : value);
        }
        else {
            return new this(value, options, errorContext);
        }
    };
    MuBase.prototype.$isReadOnly = function () {
        return this.__isReadOnly__;
    };
    MuBase.prototype.$asReadOnly = function () {
        return this.__readOnlyInstance__;
    };
    MuBase.prototype.$asReadWrite = function () {
        return this.__readWriteInstance__;
    };
    MuBase.prototype.getRuntimeId = function () {
        if (this.__id__ !== undefined) {
            return this.__id__;
        }
        if (this.__isReadOnly__) {
            return this.__readWriteInstance__.getRuntimeId();
        }
        else {
            this.__id__ = generateId();
            return this.__id__;
        }
    };
    MuBase.prototype.matches = function (other) {
        return type_match_1.isDataMatching(this, other);
    };
    return MuBase;
}(any_1.Any));
MuBase.ancestors = ['Base'];
MuBase.id = 'Base';
exports.MuBase = MuBase;
function defineNonPrimitive(id, jsClass) {
    if (!MuBase.isJsAssignableFrom(jsClass)) {
        MAILBOX.fatal("Type definition error: " + (jsClass.id || id) + " is not a subclass of NonPrimitive");
    }
    jsClass.id = id;
    if (!jsClass.ancestors) {
        jsClass.ancestors = [jsClass.id];
    }
    else if (!~jsClass.ancestors.indexOf(jsClass.id)) {
        jsClass.ancestors = jsClass.ancestors.concat([jsClass.id]);
    }
    jsClass.uniqueId = '' + utils_1.generateClassId();
}
exports.defineNonPrimitive = defineNonPrimitive;
//# sourceMappingURL=base.js.map