"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _ = require("lodash");
var utils_1 = require("../utils");
var types_1 = require("../types");
function misMatchMessage(errorContext, expected, actual, overridepath, template) {
    var expectedMessage = template ? "expected " + template + " of type" : 'expected type';
    return errorContext.entryPoint + ": \"" + (overridepath || errorContext.path) + "\" " + expectedMessage + " " + (typeof expected === 'string' ? expected : expected.id) + " but got " + utils_1.getReadableValueTypeName(actual);
}
exports.misMatchMessage = misMatchMessage;
function isAssignableFrom(toType, type) {
    return type && toType && (type.id === toType.id || (types_1.isNonPrimitiveType(type) && type.ancestors && _.includes(type.ancestors, toType.id)));
}
exports.isAssignableFrom = isAssignableFrom;
function isNullable(type) {
    return !!(type.options && type.options.nullable);
}
exports.isNullable = isNullable;
function isEnum(type) {
    return type.name === 'EnumType';
}
exports.isEnum = isEnum;
function validateValue(type, value) {
    return validateNullValue(type, value) || validateNotNullValue(type, value);
}
exports.validateValue = validateValue;
function validateNotNullValue(type, value) {
    return !!(value && value.constructor && isAssignableFrom(type, value.constructor));
}
exports.validateNotNullValue = validateNotNullValue;
function validateNullValue(type, value) {
    return !!(value === null && isNullable(type));
}
exports.validateNullValue = validateNullValue;
exports.arrow = String.fromCharCode(10144);
exports.default = {
    isAssignableFrom: isAssignableFrom, isNullable: isNullable, isEnum: isEnum
};
//# sourceMappingURL=validation.js.map