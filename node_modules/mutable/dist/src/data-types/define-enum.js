"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _ = require("lodash");
var escalate_1 = require("escalate");
var utils_1 = require("./../utils");
var any_1 = require("./any");
var MAILBOX = escalate_1.getMailBox('mutable.defineEnum');
var EnumBase = (function (_super) {
    __extends(EnumBase, _super);
    function EnumBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    EnumBase.allowPlainVal = function (v) { return true; };
    EnumBase.create = function (v) { return v; };
    EnumBase.validate = function (v) {
        return v == null || v instanceof EnumBase;
    };
    EnumBase.validateType = function (v) {
        return v == null || v instanceof EnumBase;
    };
    EnumBase.defaults = function (v) { return null; };
    EnumBase.prototype.toJSON = function () {
        return this.value;
    };
    EnumBase.prototype.toJS = function () {
        return this.value;
    };
    return EnumBase;
}(any_1.Any));
EnumBase.id = 'enum';
exports.EnumBase = EnumBase;
function createEnumMember(key, value, proto) {
    var member = Object.create(proto);
    member.key = key;
    member.value = value;
    member.toString = function () { return value.toString(); };
    member.valueOf = function () { return value.valueOf(); };
    if (value instanceof Object) {
        Object.keys(value).forEach(function (tkey) {
            member[tkey] = value[tkey];
        });
    }
    return Object.freeze(member);
}
function convertToObject(def) {
    var tdef = {};
    def.forEach(function (key) {
        tdef[key] = key;
    });
    return tdef;
}
var EnumType = (function (_super) {
    __extends(EnumType, _super);
    function EnumType(value, options, errorContext) {
        var _this = _super.call(this, value, options, errorContext) || this;
        return value;
    }
    EnumType.validate = function (v) {
        return this.validateType(v) || this.allowPlainVal(v);
    };
    EnumType.validateType = function (v) {
        return (v instanceof utils_1.getPrimeType(this) && this[v.key] === v);
    };
    EnumType.reportDefinitionErrors = function () {
        return null;
    };
    EnumType.reportSetErrors = function () {
        return null;
    };
    EnumType.reportSetValueErrors = function () {
        return null;
    };
    EnumType.withDefault = function (defaults, validate) {
        var NewType = _super.withDefault.call(this, defaults, validate);
        NewType.defaults = function () { return defaults; };
        return NewType;
    };
    ;
    return EnumType;
}(EnumBase));
function defineEnum(def) {
    var enumType = utils_1.inherit('EnumType', EnumType, function validateEnum(type, value, options, errorContext) {
        var key = _.findKey(def, function (defValue) { return defValue === value; });
        if (type[key]) {
            return [type[key], options, errorContext];
        }
        MAILBOX.error("Enum[" + Object.keys(def) + "] must be initialized with value.");
        return [undefined, options, errorContext];
    });
    enumType.create = enumType;
    enumType._prime = enumType;
    if (_.isArray(def)) {
        def = convertToObject(def);
    }
    var defVal = null;
    Object.keys(def).forEach(function (key) {
        enumType[key] = enumType[key] = createEnumMember(key, def[key], enumType.prototype);
        if (defVal == null) {
            defVal = enumType[key];
        }
    });
    enumType.defaults = function () {
        return defVal;
    };
    enumType.allowPlainVal = function (plainVal) {
        return _.includes(def, plainVal); // ToDo: is enum nullable? || validateNullValue(this, val);
    };
    enumType.withDefault = function (defaults, validate) {
        var NewType = any_1.Any.withDefault.call(this, defaults, validate);
        NewType.defaults = function () { return defaults; };
        return NewType;
    };
    enumType.__proto__ = EnumBase;
    return enumType;
}
exports.defineEnum = defineEnum;
//# sourceMappingURL=define-enum.js.map