"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var escalate_1 = require("escalate");
var mobx_1 = require("mobx");
var MAILBOX = escalate_1.getMailBox('mutable.ArrayWrapper');
var _Array = (function () {
    function _Array() {
    }
    return _Array;
}());
_Array.prototype = [];
var ArrayWrapper = (function (_super) {
    __extends(ArrayWrapper, _super);
    function ArrayWrapper(ref, mapper) {
        var _this = _super.call(this) || this;
        _this.mapper = mapper;
        Object.defineProperty(_this, "ref", {
            enumerable: false,
            configurable: true,
            get: function () {
                var res = arr = ref();
                mobx_1.untracked(updateArrayLength);
                return res;
            }
        });
        return _this;
    }
    Object.defineProperty(ArrayWrapper.prototype, "ref", {
        // here for static type checker only
        get: function () { return []; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ArrayWrapper.prototype, "length", {
        get: function () { return 0; },
        enumerable: true,
        configurable: true
    });
    return ArrayWrapper;
}(_Array));
exports.ArrayWrapper = ArrayWrapper;
Object.defineProperties(ArrayWrapper.prototype, {
    constructor: { enumerable: false },
    mapper: { enumerable: false, writable: true },
    length: { enumerable: false, get: function () { return this.ref.length; } }
});
var ARRAY_BUFFER_SIZE = 0;
var arr;
function updateArrayLength() {
    var length = arr ? arr.length : 0;
    if (length > ARRAY_BUFFER_SIZE) {
        reserveArrayBuffer(length + 1);
    }
}
function reserveArrayBuffer(max) {
    for (var index = ARRAY_BUFFER_SIZE; index < max; index++) {
        createArrayBufferItem(index);
    }
    ARRAY_BUFFER_SIZE = max;
}
function createArrayBufferItem(index) {
    var get = function () {
        var v = this.ref;
        if (index < v.length) {
            return this.mapper ? this.mapper(v[index], index) : v[index];
        }
        MAILBOX.warn("Attempt to read an array index (" + index + ") that is out of bounds (length is " + v.length + ")");
        return undefined;
    };
    Object.defineProperty(ArrayWrapper.prototype, "" + index, {
        enumerable: false,
        configurable: true,
        get: get
    });
}
reserveArrayBuffer(1000);
//# sourceMappingURL=array-wrapper.js.map