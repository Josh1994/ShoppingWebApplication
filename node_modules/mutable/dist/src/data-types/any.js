"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _ = require("lodash");
var escalate_1 = require("escalate");
var utils_1 = require("./../utils");
var type_match_1 = require("./../core/type-match");
var validation_1 = require("./../core/validation");
var MAILBOX = escalate_1.getMailBox('mutable.Any');
function reportErrorInternal(value, allowPlain, allowInstance) {
    if (value !== undefined && (!allowPlain || !this.allowPlainVal(value)) && (!allowInstance || !this.validateType(value))) {
        return { message: "expected type " + this.id + " but got " + utils_1.getReadableValueTypeName(value), path: '' };
    }
}
var Any = (function () {
    function Any() {
    }
    Any._matchValue = function (value, errorContext) {
        return new type_match_1.TypeMatch(value, errorContext).tryType(this);
    };
    Any.allowPlainVal = function (value, errorDetails) {
        if (this.validate(value)) {
            return true;
        }
        else {
            if (errorDetails) {
                errorDetails.expected = this;
                errorDetails.actual = value;
            }
            return false;
        }
    };
    Any.isNullable = function () {
        return (this.options && this.options.nullable) || false;
    };
    Any.create = function (v) {
        return this.validate(v) ? v : this.defaults();
    };
    Any.defaults = function () {
        return {};
    };
    Any.validate = function (value) {
        return validation_1.validateNullValue(this, value) || (value !== null && value !== undefined);
    };
    Any.validateType = function (value) {
        return this.validate(value);
    };
    /**
     * Determines whether an instance of a specified type can be assigned to the current type
     * @param otherType
     */
    Any.isJsAssignableFrom = function (otherType) {
        return otherType && (this.prototype === otherType.prototype || this.prototype.isPrototypeOf(otherType.prototype));
    };
    Any.nullable = function () {
        return utils_1.cloneType(this.id + '|null', this, { nullable: true });
    };
    Any.cloneValue = function (value) {
        return value;
    };
    Any.withDefault = function (defaults, validate, options) {
        var NewType = utils_1.cloneType(this.id + '_with_defaults', this, options);
        if (validate) {
            NewType.validate = validate;
        }
        if (defaults !== undefined) {
            if (defaults === null || _.isFunction(defaults)) {
                NewType.defaults = function () { return defaults; };
            }
            else {
                NewType.defaults = function () { return NewType.cloneValue(defaults); };
            }
        }
        return NewType;
    };
    Any.reportDefinitionErrors = function () {
        return undefined;
    };
    Any.reportSetValueErrors = function (value) {
        return reportErrorInternal.call(this, value, true, true);
    };
    Any.reportSetErrors = function (value) {
        return reportErrorInternal.call(this, value, false, true);
    };
    return Any;
}());
Any.id = 'Any';
Any.options = utils_1.defaultClassOptions;
exports.Any = Any;
var asType = Any;
//# sourceMappingURL=any.js.map