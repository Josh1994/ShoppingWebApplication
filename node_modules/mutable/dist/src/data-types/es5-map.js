"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _ = require("lodash");
var escalate_1 = require("escalate");
var utils_1 = require("./../utils");
var base_1 = require("./../core/base");
var generics = require("./../core/generic-types");
var validation_1 = require("./../core/validation");
var type_match_1 = require("./../core/type-match");
var map_wrapper_1 = require("./map-wrapper");
var mobx_1 = require("mobx");
var utils_2 = require("./../utils");
var config_1 = require("../config");
var MAILBOX = escalate_1.getMailBox('mutable.Es5Map');
function entries(map) {
    return (typeof map.entries === 'function') ? map.entries() : objEntries(map);
}
// because Object.entries is too tall an order
function objEntries(obj) {
    return Object.keys(obj).reduce(function (prevValue, key) {
        if (key !== '_type') {
            prevValue.push([key, obj[key]]);
        }
        return prevValue;
    }, []);
}
function safeAsReadOnly(item) {
    return (item && typeof item.$asReadOnly === 'function') ? item.$asReadOnly() : item;
}
function safeAsReadOnlyOrArr(item) {
    if (_.isArray(item)) {
        return item.map(safeAsReadOnlyOrArr);
    }
    else {
        return safeAsReadOnly(item);
    }
}
function isIterable(value) {
    return value && (_.isArray(value) || value instanceof Map || typeof value[Symbol.iterator] === 'function');
}
var MapReferenceToDictionary = (function (_super) {
    __extends(MapReferenceToDictionary, _super);
    function MapReferenceToDictionary(rootReference, path, thisType) {
        return _super.call(this, function () { return utils_1.getValueFromRootRef(rootReference, path); }, function (value, idx) { return utils_1.getReferenceWrapper(thisType, thisType.options.subTypes, rootReference, path.concat(idx), value); }) || this;
    }
    return MapReferenceToDictionary;
}(map_wrapper_1.MapWrapperOverDictionary));
var Es5Map = (function (_super) {
    __extends(Es5Map, _super);
    function Es5Map(value, options, errorContext) {
        if (value === void 0) { value = []; }
        if (options === void 0) { options = { subTypes: {} }; }
        if (errorContext === void 0) { errorContext = null; }
        var _this = this;
        if (!errorContext) {
            errorContext = Es5Map.createErrorContext('Es5Map constructor error', 'error', options);
        }
        options.subTypes = generics.typesAsArray(options.subTypes);
        _this = _super.call(this, value, options, errorContext) || this;
        var report = _this.__ctor__.reportDefinitionErrors();
        if (report) {
            MAILBOX.error("Es5Map constructor: \"" + report.path + "\" " + report.message);
        }
        return _this;
    }
    Es5Map.defaults = function () { return {}; };
    Es5Map.cloneValue = function (value) {
        if (_.isArray(value) || Es5Map.validateType(value) || _.isObject(value)) {
            if (!value) {
                return value;
            }
            if (!isIterable(value)) {
                value = entries(value);
            }
            Es5Map._allowIterable(value, this.options);
            var result = [];
            for (var _i = 0, value_1 = value; _i < value_1.length; _i++) {
                var entry = value_1[_i];
                result.push(entry);
            }
            return result;
        }
        else {
            return [];
        }
    };
    Es5Map._allowIterable = function (iterable, options, errorDetails) {
        if (errorDetails === void 0) { errorDetails = null; }
        if (options && options.subTypes) {
            for (var _i = 0, iterable_1 = iterable; _i < iterable_1.length; _i++) {
                var _a = iterable_1[_i], key = _a[0], value = _a[1];
                if (!generics.getMatchingType(options.subTypes, value)) {
                    if (errorDetails) {
                        errorDetails.path = errorDetails.path + "[" + key + "]";
                        errorDetails.expected = generics.toString(options.subTypes);
                        errorDetails.actual = value;
                    }
                    return false;
                }
            }
        }
        return true;
    };
    Es5Map.allowPlainVal = function (value, errorDetails) {
        if (errorDetails === void 0) { errorDetails = null; }
        if (validation_1.validateNullValue(this, value)) {
            return true;
        }
        else if (isIterable(value)) {
            return Es5Map._allowIterable(value, this.options, errorDetails);
        }
        else if (value instanceof Object) {
            return Es5Map._allowIterable(objEntries(value), this.options, errorDetails);
        }
        return false;
    };
    Es5Map._validateEntryKey = function (key, errorContext) {
        if (typeof key !== 'string') {
            MAILBOX.post(errorContext.level, validation_1.misMatchMessage(errorContext, '<string>', key, null, 'key'));
        }
    };
    Es5Map._wrapEntryValue = function (value, options, lifeCycle, errorContext) {
        var result = generics.doOnType(options.subTypes, function (type) {
            if (type.validateType(value) || type.allowPlainVal(value)) {
                return type_match_1.validateAndWrap(value, type, lifeCycle, errorContext);
            }
        });
        if (null === result || undefined === result) {
            var allowedTypes = generics.toString(options.subTypes);
            MAILBOX.post(errorContext.level, validation_1.misMatchMessage(errorContext, allowedTypes, value, null, 'value'));
        }
        else {
            return result;
        }
    };
    Es5Map._wrapIterable = function (iterable, options, lifeCycle, errorContext) {
        var result = {};
        for (var _i = 0, iterable_2 = iterable; _i < iterable_2.length; _i++) {
            var _a = iterable_2[_i], key = _a[0], value = _a[1];
            if (key !== '_type') {
                this._validateEntryKey(key, errorContext);
                value = this._wrapEntryValue(value, options, lifeCycle, errorContext);
                result[key] = value;
            }
        }
        return config_1.default.observable ? mobx_1.observable.shallowMap(result) : Object.keys(result).reduce(function (map, key) { return map.set(key, result[key]); }, new Map());
    };
    Es5Map.validate = function (value) {
        return validation_1.validateValue(this, value) || isIterable(value) || value instanceof Object;
    };
    Es5Map.makeValue = function (value, options, errorContext) {
        if (_super.validateType.call(this, value)) {
            return this._wrapIterable(value.__value__.entries(), options, null, errorContext);
        }
        if (isIterable(value)) {
            return this._wrapIterable(value, options, null, errorContext);
        }
        if (_.isObject(value)) {
            return this._wrapIterable(objEntries(value), options, null, errorContext);
        }
        else {
            MAILBOX.error('Unknown or incompatible Map value : ' + JSON.stringify(value));
        }
    };
    Es5Map.reportDefinitionErrors = function () {
        var ops = this.options;
        if (ops && ops.definitionError) {
            return ops.definitionError;
        }
        if (!ops || !ops.subTypes) {
            return { path: validation_1.arrow + 'Es5Map', message: "Untyped Maps are not supported please state types of key and value in the format core3.Es5Map<SomeType>" };
        }
        else {
            var valueTypeError = generics.reportDefinitionErrors(ops.subTypes, utils_1.reportFieldDefinitionError, 'value');
            if (valueTypeError) {
                return { path: "Es5Map<" + (valueTypeError.path || validation_1.arrow + generics.toUnwrappedString(ops.subTypes)) + ">", message: valueTypeError.message };
            }
        }
    };
    Es5Map.of = function (subTypes) {
        var definitionError;
        switch (arguments.length) {
            case 0:
                definitionError = { path: validation_1.arrow + 'Es5Map', message: 'Missing types for map. Use Es5Map<SomeType>' };
                break;
            case 1:
                subTypes = generics.typesAsArray(subTypes);
                break;
            default:
                subTypes = generics.typesAsArray(subTypes);
                definitionError = { path: "Es5Map<" + generics.toUnwrappedString(subTypes) + "," + validation_1.arrow + "unallowed>", message: "Too many types for map (" + arguments.length + "). Use Es5Map<SomeType>" };
        }
        return this.withDefault(undefined, undefined, { subTypes: subTypes, definitionError: definitionError });
    };
    ;
    Es5Map.createErrorContext = function (entryPoint, level, options) {
        options = options || this.options || this.__options__;
        return {
            entryPoint: entryPoint,
            level: level,
            path: 'Es5Map' + generics.toString(options ? options.subTypes : [])
        };
    };
    Es5Map.byReference = function (provider, path) {
        if (path === void 0) { path = []; }
        // wrap provider
        var result = new this();
        result.__value__ = new MapReferenceToDictionary(provider, path, this);
        return result;
    };
    // shallow merge native javascript data into the map
    Es5Map.prototype.setValue = function (newValue, errorContext) {
        var _this = this;
        if (errorContext === void 0) { errorContext = null; }
        var changed = false;
        if (this.$isDirtyable()) {
            mobx_1.untracked(function () {
                errorContext = errorContext || _this.constructor.createErrorContext('Map setValue error', 'error', _this.__options__);
                newValue = _this.constructor.makeValue(newValue, _this.__options__, errorContext);
                newValue.forEach(function (val, key) {
                    changed = changed || utils_2.shouldAssign(_this.__value__.get(key), val);
                });
                if (!changed) {
                    _this.__value__.forEach(function (val, key) {
                        changed = changed || utils_2.shouldAssign(val, newValue.get(key));
                    });
                }
            });
            // apply changes only after no error was thrown.
            // otherwise we can get an inconsistent map
            if (changed) {
                if (config_1.default.observable) {
                    this.__value__.clear();
                    this.__value__.merge(newValue);
                }
                else {
                    this.__value__ = newValue;
                }
            }
        }
        return changed;
    };
    Es5Map.prototype.__setValueDeepHandler__ = function (toSet, toSetValueDeep, key, val, errorContext) {
        if (key !== '_type') {
            var oldVal = this.__value__.get(key);
            if (utils_2.shouldAssign(this.__value__.get(key), val)) {
                if (oldVal && typeof oldVal.setValueDeep === 'function' && !oldVal.$isReadOnly() &&
                    (oldVal.constructor.allowPlainVal(val) || oldVal.constructor.validateType(val))) {
                    toSetValueDeep[key] = [oldVal, val];
                }
                else if (utils_2.shouldAssign(this.__value__.get(key), val)) {
                    val = this.constructor._wrapEntryValue(val, this.__options__, this.__lifecycleManager__, errorContext);
                    toSet[key] = val;
                }
            }
        }
    };
    // deep merge native javascript data into the map
    Es5Map.prototype.setValueDeep = function (newValue, errorContext) {
        var _this = this;
        if (errorContext === void 0) { errorContext = null; }
        var toSet = {};
        var toSetValueDeep = {};
        var toDelete = {};
        var changed;
        if (this.$isDirtyable()) {
            // collect data for change
            mobx_1.untracked(function () {
                errorContext = errorContext || _this.constructor.createErrorContext('Es5Map setValue error', 'error', _this.__options__);
                // TODO this code has the same structure as makeValue, combine both together
                _this.__value__.keys().forEach(function (key) { return toDelete[key] = true; });
                var newEntriesVisitor = function (val, key) {
                    delete toDelete[key];
                    _this.__setValueDeepHandler__(toSet, toSetValueDeep, key, val, errorContext);
                };
                if (base_1.MuBase.validateType(newValue)) {
                    newValue.__value__.forEach(newEntriesVisitor);
                }
                else if (isIterable(newValue)) {
                    for (var _i = 0, newValue_1 = newValue; _i < newValue_1.length; _i++) {
                        var _a = newValue_1[_i], key = _a[0], val = _a[1];
                        newEntriesVisitor(val, key);
                    }
                }
                else if (_.isObject(newValue)) {
                    for (var key in newValue) {
                        if (newValue.hasOwnProperty(key)) {
                            var val = newValue[key];
                            newEntriesVisitor(val, key);
                        }
                    }
                }
                else {
                    MAILBOX.error('Unknown or incompatible Es5Map value : ' + JSON.stringify(newValue));
                }
            });
            // apply changes
            _.forEach(toSetValueDeep, function (_a, key) {
                var oldVal = _a[0], val = _a[1];
                return changed = oldVal.setValueDeep(val, errorContext) || changed;
            });
            if (Object.keys(toSet).length || Object.keys(toDelete).length) {
                Object.keys(toDelete).forEach(function (key) { return _this.__value__.delete(key); });
                _.forEach(toSet, function (val, key) { return _this.__value__.set(key, val); });
                changed = true;
            }
        }
        return changed;
    };
    Es5Map.prototype.__exposeInner__ = function (item) {
        if (this.__isReadOnly__) {
            return safeAsReadOnlyOrArr(item);
        }
        return item;
    };
    // Needed to support TypeScript's transpilation of "for x of y"
    Es5Map.prototype.__unpackIterator__ = function (innerIterator) {
        return this.__isReadOnly__ ? innerIterator.map(safeAsReadOnlyOrArr) : innerIterator;
    };
    Es5Map.prototype.clear = function () {
        if (this.$isDirtyable()) {
            this.__value__.clear();
        }
    };
    Es5Map.prototype.delete = function (key) {
        if (this.$isDirtyable()) {
            var errorContext = this.constructor.createErrorContext('Es5Map delete error', 'error', this.__options__);
            this.constructor._validateEntryKey(key, errorContext);
            return this.__value__.delete(key);
        }
        return false;
    };
    Es5Map.prototype.set = function (key, value) {
        var _this = this;
        if (this.$isDirtyable()) {
            var errorContext = this.constructor.createErrorContext('Es5Map set error', 'error', this.__options__);
            this.constructor._validateEntryKey(key, errorContext);
            value = this.constructor._wrapEntryValue(value, this.__options__, this.__lifecycleManager__, errorContext);
            if (mobx_1.untracked(function () { return utils_2.shouldAssign(_this.__value__.get(key), value); })) {
                this.__value__.set(key, value);
            }
        }
        return this;
    };
    Es5Map.prototype.get = function (key) {
        var errorContext = this.constructor.createErrorContext('Es5Map get error', 'error', this.__options__);
        this.constructor._validateEntryKey(key, errorContext);
        return this.__exposeInner__(this.__value__.get(key));
    };
    Es5Map.prototype.has = function (key) {
        var errorContext = this.constructor.createErrorContext('Es5Map has error', 'error', this.__options__);
        this.constructor._validateEntryKey(key, errorContext);
        return this.__value__.has(key);
    };
    Es5Map.prototype.entries = function () {
        return this.__unpackIterator__(Array.from(this.__value__.entries()));
    };
    Es5Map.prototype.keys = function () {
        return this.__unpackIterator__(Array.from(this.__value__.keys()));
    };
    Es5Map.prototype.values = function () {
        return this.__unpackIterator__(Array.from(this.__value__.values()));
    };
    Es5Map.prototype.forEach = function (callback, thisArg) {
        var _this = this;
        if (thisArg) {
            callback = callback.bind(thisArg);
        }
        this.__value__.forEach(function (value, key) {
            callback(_this.__exposeInner__(value), key, _this);
        }, thisArg);
    };
    Es5Map.prototype.toJSON = function (recursive, typed) {
        var _this = this;
        if (recursive === void 0) { recursive = true; }
        if (typed === void 0) { typed = false; }
        var result = {};
        this.__value__.forEach(function (value, key) {
            result[key] = (recursive && value && base_1.MuBase.validateType(value)) ? value.toJSON(true, typed) : _this.__exposeInner__(value);
        });
        if (typed) {
            result._type = this.constructor.id;
        }
        return result;
    };
    Es5Map.prototype.toJS = function (typed) {
        if (typed === void 0) { typed = false; }
        var result = {};
        this.__value__.forEach(function (value, key) {
            result[key] = (value && value.toJS) ? value.toJS(typed) : value;
        });
        if (typed) {
            result._type = this.constructor.id;
        }
        return result;
    };
    /**
     * get iterator over all map keys and values that are dirtyable
     */
    // consider optimizing if array is of primitive type only
    Es5Map.prototype.$dirtyableElementsIterator = function (yielder) {
        var _this = this;
        this.__value__.forEach(function (value) {
            if (value && _.isFunction(value.$setManager)) {
                yielder(_this, value);
            }
        });
    };
    Es5Map.prototype.$atomsIterator = function (yielder) {
        var _this = this;
        if (config_1.default.observable) {
            yielder(mobx_1.extras.getAtom(this.__value__));
            var disposeMeOrIWillLeak = mobx_1.autorun(function () { return _this.__value__.keys().forEach(function (key) { return yielder(mobx_1.extras.getAtom(_this.__value__, key)); }); });
        }
    };
    Object.defineProperty(Es5Map.prototype, "size", {
        get: function () {
            return this.__value__.size;
        },
        enumerable: true,
        configurable: true
    });
    return Es5Map;
}(base_1.MuBase));
exports.default = Es5Map;
base_1.defineNonPrimitive('Es5Map', Es5Map);
//# sourceMappingURL=es5-map.js.map