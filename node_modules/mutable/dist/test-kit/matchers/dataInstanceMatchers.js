"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var _ = require("lodash");
function default_1(chai, utils) {
    chai.Assertion.addProperty("dataInstance", function () {
        var instance = this._obj;
        return new DataInstanceAssertion(instance);
    });
    var DataInstanceAssertion = (function (_super) {
        __extends(DataInstanceAssertion, _super);
        function DataInstanceAssertion() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        DataInstanceAssertion.prototype.fields = function (expectFunction) {
            var _this = this;
            var instance = this._obj;
            var fieldsSpec = instance.constructor._spec;
            _.forEach(fieldsSpec, function (fieldSpec, fieldName) {
                expectFunction(new DataInstanceFieldAssertion({
                    value: instance[fieldName],
                    name: fieldName,
                    spec: fieldSpec
                }, _this));
            });
            return new DataInstanceAssertion(instance);
        };
        return DataInstanceAssertion;
    }(chai.Assertion));
    var DataInstanceFieldAssertion = (function (_super) {
        __extends(DataInstanceFieldAssertion, _super);
        function DataInstanceFieldAssertion() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        DataInstanceFieldAssertion.prototype.defaultValue = function () {
            var field = this._obj;
            var defaultValue = field.spec.defaults();
            this.assert(field.value === defaultValue, 'expected field "' + field.name + '" to be the default value but got #{act}', 'expected field "' + field.name + '" not to be the default value but got #{act}', defaultValue, field.value, true);
            return new DataInstanceFieldAssertion(field);
        };
        return DataInstanceFieldAssertion;
    }(chai.Assertion));
}
exports.default = default_1;
;
//# sourceMappingURL=dataInstanceMatchers.js.map