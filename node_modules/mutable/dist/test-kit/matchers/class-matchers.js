"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var mu = require("../../src");
function default_1(chai, utils) {
    chai.Assertion.addMethod("field", function (name) {
        var Type = this._obj;
        this.assert(mu.Object.prototype.isPrototypeOf(Type.prototype), 'expected a Type but got #{act}', 'expected not a Type but got #{act}', mu.Object, Type, true);
        var TypeName = Type.displayName || Type;
        var spec = Type._spec[name];
        this.assert(spec !== undefined, 'expected a Type with a field ' + name, 'expected a Type without a field ' + name, name, undefined, true);
        return new TypeFieldAssertion({ spec: spec, name: name });
    });
    var TypeFieldAssertion = (function (_super) {
        __extends(TypeFieldAssertion, _super);
        function TypeFieldAssertion() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        TypeFieldAssertion.prototype.defaults = function (expectedValue) {
            var field = this._obj;
            var defaults = field.spec.defaults();
            this.assert(defaults === expectedValue, 'expected field "' + field.name + '" defaults to be #{exp} but got #{act}', 'expected field "' + field.name + '" defaults not to be #{exp} but got #{act}', expectedValue, defaults, true);
            return new TypeFieldAssertion(field, this);
        };
        TypeFieldAssertion.prototype.type = function (expectedType) {
            var field = this._obj;
            this.assert(expectedType.isJsAssignableFrom(field.spec), 'expected field "' + field.name + '" type to be #{exp} but got #{act}', 'expected field "' + field.name + '" type not to be #{exp} but got #{act}', expectedType.displayName || expectedType, field.spec.displayName || field.spec, true);
            return new TypeFieldAssertion(field, this);
        };
        return TypeFieldAssertion;
    }(chai.Assertion));
}
exports.default = default_1;
;
//# sourceMappingURL=class-matchers.js.map