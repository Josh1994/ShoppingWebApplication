"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var untypedList = 'Untyped Lists are not supported please state type of list item in the format core3.List<string>';
var reserved = 'is a reserved field.';
function ERROR_BAD_TYPE(path, type) {
    return { level: 'error', params: "Type constructor error: \"" + path + "\" \"" + type + "\" is not inherited correctly. Did you remember to import core3-runtime?" };
}
exports.ERROR_BAD_TYPE = ERROR_BAD_TYPE;
function ERROR_IN_SET(path, fieldType, passedType) {
    return { level: 'error', params: "Set error: \"" + path + "\" expected type " + fieldType + " but got " + passedType };
}
exports.ERROR_IN_SET = ERROR_IN_SET;
function ERROR_IN_SET_VALUE(path, fieldType, passedType) {
    return { level: 'error', params: "setValue error: \"" + path + "\" expected type " + fieldType + " but got " + passedType };
}
exports.ERROR_IN_SET_VALUE = ERROR_IN_SET_VALUE;
function ERROR_IN_SET_VALUE_DEEP(path, fieldType, passedType) {
    return { level: 'error', params: "setValueDeep error: \"" + path + "\" expected type " + fieldType + " but got " + passedType };
}
exports.ERROR_IN_SET_VALUE_DEEP = ERROR_IN_SET_VALUE_DEEP;
function ERROR_IN_DEFAULT_VALUES(path, fieldType, passedType) {
    return { level: 'fatal', params: "Type definition error: \"" + path + "\" expected type " + fieldType + " but got " + passedType };
}
exports.ERROR_IN_DEFAULT_VALUES = ERROR_IN_DEFAULT_VALUES;
function ERROR_IN_FIELD_TYPE(path) {
    return { level: 'fatal', params: "Type definition error: \"" + path + "\" must be a primitive type or extend core3.Type" };
}
exports.ERROR_IN_FIELD_TYPE = ERROR_IN_FIELD_TYPE;
function ERROR_MISSING_GENERICS(path) {
    return { level: 'fatal', params: "Type definition error: \"" + path + "\" " + untypedList };
}
exports.ERROR_MISSING_GENERICS = ERROR_MISSING_GENERICS;
function ERROR_RESERVED_FIELD(path) {
    return { level: 'fatal', params: "Type definition error: \"" + path + "\" " + reserved };
}
exports.ERROR_RESERVED_FIELD = ERROR_RESERVED_FIELD;
function ERROR_OVERRIDE_FIELD(path, superName) {
    return "Type definition error: \"" + path + "\" already exists on super " + superName;
}
exports.ERROR_OVERRIDE_FIELD = ERROR_OVERRIDE_FIELD;
function ERROR_FIELD_MISMATCH_IN_CONSTRUCTOR(path, fieldType, passedType) {
    return { level: 'error', params: "Type constructor error: \"" + path + "\" expected type " + fieldType + " but got " + passedType };
}
exports.ERROR_FIELD_MISMATCH_IN_CONSTRUCTOR = ERROR_FIELD_MISMATCH_IN_CONSTRUCTOR;
function ERROR_FIELD_MISMATCH_IN_LIST_CONSTRUCTOR(path, fieldType, passedType) {
    return ERROR_FIELD_MISMATCH_IN_LIST_METHOD('constructor', path, fieldType, passedType);
}
exports.ERROR_FIELD_MISMATCH_IN_LIST_CONSTRUCTOR = ERROR_FIELD_MISMATCH_IN_LIST_CONSTRUCTOR;
function ERROR_FIELD_MISMATCH_IN_LIST_METHOD(method, path, fieldType, passedType) {
    return { level: 'error', params: "List " + method + " error: \"" + path + "\" expected type " + fieldType + " but got " + passedType };
}
exports.ERROR_FIELD_MISMATCH_IN_LIST_METHOD = ERROR_FIELD_MISMATCH_IN_LIST_METHOD;
function ERROR_FIELD_MISMATCH_IN_MAP_CONSTRUCTOR(path, fieldType, passedType, mapType) {
    if (mapType === void 0) { mapType = "Map"; }
    return { level: 'error', params: mapType + " constructor error: \"" + path + "\" expected value of type " + fieldType + " but got " + passedType };
}
exports.ERROR_FIELD_MISMATCH_IN_MAP_CONSTRUCTOR = ERROR_FIELD_MISMATCH_IN_MAP_CONSTRUCTOR;
function ERROR_KEY_MISMATCH_IN_MAP_CONSTRUCTOR(path, keyType, passedType, mapType) {
    if (mapType === void 0) { mapType = "Map"; }
    return ERROR_KEY_MISMATCH_IN_MAP_METHOD('constructor', path, keyType, passedType, mapType);
}
exports.ERROR_KEY_MISMATCH_IN_MAP_CONSTRUCTOR = ERROR_KEY_MISMATCH_IN_MAP_CONSTRUCTOR;
function ERROR_KEY_MISMATCH_IN_MAP_METHOD(method, path, keyType, passedType, mapType) {
    if (mapType === void 0) { mapType = "Map"; }
    return { level: 'error', params: mapType + " " + method + " error: \"" + path + "\" expected key of type " + keyType + " but got " + passedType };
}
exports.ERROR_KEY_MISMATCH_IN_MAP_METHOD = ERROR_KEY_MISMATCH_IN_MAP_METHOD;
function ERROR_VALUE_MISMATCH_IN_MAP_METHOD(method, path, keyType, passedType, mapType) {
    if (mapType === void 0) { mapType = "Map"; }
    return { level: 'error', params: mapType + " " + method + " error: \"" + path + "\" expected value of type " + keyType + " but got " + passedType };
}
exports.ERROR_VALUE_MISMATCH_IN_MAP_METHOD = ERROR_VALUE_MISMATCH_IN_MAP_METHOD;
function ERROR_ATTEMPTING_TO_OVERRIDE_READONLY(readOnlyValue, id, fieldName, newValue) {
    return { level: 'warn', params: "Attempt to override a read only value " + JSON.stringify(readOnlyValue) + " at " + id + "." + fieldName + " with " + JSON.stringify(newValue) };
}
exports.ERROR_ATTEMPTING_TO_OVERRIDE_READONLY = ERROR_ATTEMPTING_TO_OVERRIDE_READONLY;
exports.arrow = String.fromCharCode(10144);
//# sourceMappingURL=reports.js.map