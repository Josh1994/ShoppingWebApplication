{"version":3,"sources":["../../../test-kit/test/index.js"],"names":["escalate","PARAMS","CONTEXT","getOneTimeReporterForLevel","reportLevel","getMailBox","testMatcherConlfusionMatrix","matcher","positive","negative","it","to","report","not","throw","describe","levels","forEach","reportIdx","reportMatcher","reporterForLevel","reporterForAnotherLevel","length","recording","eql","level","context","params","post"],"mappings":";;;;;;;;;;;;;;;KAIYA,Q;;;;;;;;;;;;;;;;;;;AAIZ,KAAIC,SAAS,CAAC,aAAD,EAAgB,CAAhB,EAAmB,EAAnB,CAAb,C,CARA;;;;AASA,KAAIC,UAAU,EAAd;AACA,UAASC,0BAAT,CAAoCC,WAApC,EAAiD;AAChD,SAAO;AAAA;;AAAA,UAAM,iCAASC,UAAT,CAAoBH,OAApB,GAA6BE,WAA7B,8BAA6CH,MAA7C,CAAN;AAAA,GAAP;AACA;AACD,UAASK,2BAAT,CAAqCC,OAArC,EAA8CC,QAA9C,EAAwDC,QAAxD,EAAkE;AACjEC,iDAA+C,YAAM;AACpD,qBAAO,YAAM;AACZ,sBAAOF,QAAP,EAAiBG,EAAjB,CAAoBC,MAApB,CAA2BL,OAA3B;AACA,IAFD,EAEGI,EAFH,CAEME,GAFN,CAEUC,KAFV;AAGA,GAJD;AAKAJ,gDAA8C,YAAM;AACnD,qBAAO,YAAM;AACZ,sBAAOD,QAAP,EAAiBI,GAAjB,CAAqBF,EAArB,CAAwBC,MAAxB,CAA+BL,OAA/B;AACA,IAFD,EAEGI,EAFH,CAEME,GAFN,CAEUC,KAFV;AAGA,GAJD;AAKAJ,oEAAkE,YAAM;AACvE,qBAAO,YAAM;AACZ,sBAAOF,QAAP,EAAiBK,GAAjB,CAAqBF,EAArB,CAAwBC,MAAxB,CAA+BL,OAA/B;AACA,IAFD,EAEGI,EAFH,CAEMG,KAFN;AAGA,GAJD;AAKAJ,oEAAkE,YAAM;AACvE,qBAAO,YAAM;AACZ,sBAAOD,QAAP,EAAiBE,EAAjB,CAAoBC,MAApB,CAA2BL,OAA3B;AACA,IAFD,EAEGI,EAFH,CAEMG,KAFN;AAGA,GAJD;AAKA;AACDC,UAAS,kBAAT,EAA6B,YAAM;AAClCf,WAASgB,MAAT,CAAgBC,OAAhB,CAAwB,UAACb,WAAD,EAAcc,SAAd,EAA4B;AACnD,OAAIC,gBAAgB,mBAAWf,WAAX,EAAwBF,OAAxB,EAAiCD,MAAjC,CAApB;AACA,OAAImB,mBAAmBjB,2BAA2BC,WAA3B,CAAvB;AACA,OAAIiB,0BAA0BlB,2BAA2BH,SAASgB,MAAT,CAAgB,CAACE,YAAY,CAAb,IAAkBlB,SAASgB,MAAT,CAAgBM,MAAlD,CAA3B,CAA9B;AACAP,0CAAoCX,WAApC,eAA0D,YAAM;AAC/DE,gCACCa,aADD,EAECC,gBAFD,EAGCC,uBAHD;AAIA,IALD;AAMAX,mCAA8BN,WAA9B,eAAqD,YAAM;AAC1D,QAAImB,YAAY,oBAAOH,gBAAP,CAAhB;AACA,sBAAOG,SAAP,EAAkBZ,EAAlB,CAAqBa,GAArB,CAAyB,CAAC,EAACC,OAAQrB,WAAT,EAAsBsB,SAAUxB,OAAhC,EAAyCyB,QAAS1B,MAAlD,EAAD,CAAzB;AACA,sBAAOsB,SAAP,EAAkBZ,EAAlB,CAAqBa,GAArB,CAAyB,CAACL,aAAD,CAAzB;AACA,IAJD;AAKAT,wBAAmBN,WAAnB,qBAAgD,YAAM;AACrD,sBAAO;AAAA;;AAAA,YAAM,kCAASC,UAAT,CAAoBH,OAApB,GAA6B0B,IAA7B,+BAAkCxB,WAAlC,SAAkDH,MAAlD,EAAN;AAAA,KAAP,EAAwEU,EAAxE,CAA2EC,MAA3E,CAAkFO,aAAlF;AACA,IAFD;AAGA,GAlBD;AAmBAJ,WAAS,wBAAT,EAAmC,YAAM;AACxCT,+BACC,EAACmB,OAAO,kBAAR,EADD,EAECtB,2BAA2B,OAA3B,CAFD,EAGCA,2BAA2B,MAA3B,CAHD;AAIA,GALD;AAOA,EA3BD","file":"index.js","sourcesContent":["/**\n * Created by amira on 6/8/15.\n */\nimport {expect} from \"chai\";\nimport * as escalate from '../../src/index';\nimport {listen, Report} from '../testDrivers/index';\n\n\nvar PARAMS = ['TEST PARAMS', 1, {}];\nvar CONTEXT = {};\nfunction getOneTimeReporterForLevel(reportLevel) {\n\treturn () => escalate.getMailBox(CONTEXT)[reportLevel](...PARAMS);\n}\nfunction testMatcherConlfusionMatrix(matcher, positive, negative) {\n\tit(`matches existing reports (true positive)`, () => {\n\t\texpect(() => {\n\t\t\texpect(positive).to.report(matcher);\n\t\t}).to.not.throw();\n\t});\n\tit(`matches missing reports (true negative)`, () => {\n\t\texpect(() => {\n\t\t\texpect(negative).not.to.report(matcher);\n\t\t}).to.not.throw();\n\t});\n\tit(`does not match existing reports as missing (false negative)`, () => {\n\t\texpect(() => {\n\t\t\texpect(positive).not.to.report(matcher);\n\t\t}).to.throw();\n\t});\n\tit(`does not match missing reports as existing (false positive)`, () => {\n\t\texpect(() => {\n\t\t\texpect(negative).to.report(matcher);\n\t\t}).to.throw();\n\t})\n}\ndescribe('escalate testkit', () => {\n\tescalate.levels.forEach((reportLevel, reportIdx) => {\n\t\tvar reportMatcher = new Report(reportLevel, CONTEXT, PARAMS);\n\t\tvar reporterForLevel = getOneTimeReporterForLevel(reportLevel);\n\t\tvar reporterForAnotherLevel = getOneTimeReporterForLevel(escalate.levels[(reportIdx + 1) % escalate.levels.length]);\n\t\tdescribe(`exact chai matcher for '${reportLevel}' level`, () => {\n\t\t\ttestMatcherConlfusionMatrix(\n\t\t\t\treportMatcher, \n\t\t\t\treporterForLevel, \n\t\t\t\treporterForAnotherLevel);\n\t\t});\n\t\tit(`recorder tool can match ${reportLevel} reports`, () => {\n\t\t\tvar recording = listen(reporterForLevel);\n\t\t\texpect(recording).to.eql([{level : reportLevel, context : CONTEXT, params : PARAMS}]);\n\t\t\texpect(recording).to.eql([reportMatcher]);\n\t\t});\n\t\tit(`mailbox.post(${reportLevel}, ...) reports`, () => {\n\t\t\texpect(() => escalate.getMailBox(CONTEXT).post(reportLevel, ...PARAMS)).to.report(reportMatcher);\n\t\t});\n\t});\n\tdescribe('chai matcher for regex', () => {\n\t\ttestMatcherConlfusionMatrix(\n\t\t\t{level: /warn|error|fatal/},\n\t\t\tgetOneTimeReporterForLevel('error'),\n\t\t\tgetOneTimeReporterForLevel('info'));\n\t});\n\n});"]}