{"version":3,"sources":["../../test/index.js"],"names":["_","escalate","expect","use","chai","EXPECTED_LEVELS","PARAMS","describe","sandbox","originalConfig","after","restore","before","config","create","afterEach","forEach","level","it","levels","to","contain","spy","console","logThresholdStrategy","eql","panicThresholdStrategy","panicStrategy","throw","checkStackTrace","thrower","stack1","Error","stack","split","stack2","getMailBox","e","shorterStack","min","length","i","equal","mailBox","fatal","post","consoleLevel","reset","loggerStrategy","called","be","true","args","beforeEach","comparisonBase","func","constant","newConfig","panicSpy","not","calledOnce","calledWithExactly","logger","panic","replaceAllButEscalate","field","replacement","ctx","panicLevel","panicLevelIdx","slice","logLevel","logLevelIdx","reportLevel","reportLevelIdx","levelTestSuite","reportFn","false","levelCheck","clock","useFakeTimers","infoSpy","activateTimers","context","info","warn","error","log","myMailBox","startTimer","tick","endTimer"],"mappings":"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","file":"index.js","sourcesContent":["/**\n * Created by amira on 2/8/15.\n */\nimport * as _ from 'lodash';\nimport sinon from 'sinon';\nimport * as escalate from '../src/index.js';\nimport {Report} from '../test-kit/testDrivers/index';\nimport testKit from '../test-kit';\nimport chai from 'chai';\nconst expect = chai.expect;\nchai.use(testKit.chai);\n\nimport \"../test-kit/test\";\n\nvar EXPECTED_LEVELS = ['debug', 'info', 'warn', 'error', 'fatal'];\nvar PARAMS = ['TEST PARAMS', 1, {}];\n\ndescribe('escalate', () => {\n\tvar sandbox, originalConfig;\n\tafter(() => {\n\t\tsandbox.restore();\n\t});\n\tbefore('save original configuration', () => {\n\t\toriginalConfig = escalate.config();\n\t\tsandbox = sinon.sandbox.create();\n\t});\n\tafterEach('reset configurations', () => {\n\t\tescalate.config(originalConfig);\n\t});\n\tEXPECTED_LEVELS.forEach((level) => {\n\t\tit(`${level} is a legal report level`, ()=> {\n\t\t\texpect(escalate.levels).to.contain(level);\n\t\t});\n\t});\n\tdescribe('default configuration', () => {\n\t\tbefore('spy on console', () => {\n\t\t\t['info', 'warn', 'error'].forEach((level) => {\n\t\t\t\tsandbox.spy(console, level);\n\t\t\t});\n\t\t});\n\t\tit('logger threshold is info', ()=> {\n\t\t\texpect(originalConfig.logThresholdStrategy()).to.eql('info');\n\t\t});\n\t\tit('panic threshold is error', ()=> {\n\t\t\texpect(originalConfig.panicThresholdStrategy()).to.eql('error');\n\t\t});\n\t\tit('panic throws', ()=> {\n\t\t\texpect(() => originalConfig.panicStrategy()(...PARAMS), 'reporting fatal with default configuration').to.throw;\n\t\t});\n\t\tvar checkStackTrace = function (thrower) {\n\t\t\tvar stack1 = new Error('hi').stack.split('\\n');\n\t\t\tvar stack2;\n\t\t\ttry {\n\t\t\t\tthrower(escalate.getMailBox());\n\t\t\t} catch (e) {\n\t\t\t\tstack2 = e.stack.split('\\n');\n\t\t\t}\n\t\t\tconst shorterStack=_.min([stack1.length, stack2.length]) -1;\n\t\t\tfor (let i = 1; i < shorterStack; ++i) {\n\t\t\t\texpect(stack1[i].split(/\\s+/)[2], 'line ' + i).to.equal(stack2[i+1].split(/\\s+/)[2]); \t// ['','at','Context.<anonymous>','(dist/test/index.js:79:43)']\n\t\t\t}\n\t\t};\n\t\tit('.fatal() stack trace starts in same place as regular throws (transparent stack trace)', ()=> {\n\t\t\tcheckStackTrace( (mailBox) => mailBox.fatal('hi'));\n\t\t});\n\t\tit('.post(\"fatal\") stack trace starts in same place as regular throws (transparent stack trace)', ()=> {\n\t\t\tcheckStackTrace( (mailBox) => mailBox.post('fatal', 'hi'));\n\t\t});\n\t\t['debug', 'info', 'warn', 'error'].forEach((level) => {\n\t\t\tvar consoleLevel = (level === 'debug') ? 'info' : level;\n\t\t\tit(`logger.${level} writes to console.${consoleLevel}`, ()=> {\n\t\t\t\tconsole[consoleLevel].reset();\n\t\t\t\toriginalConfig.loggerStrategy()[level](...PARAMS);\n\t\t\t\texpect(console[consoleLevel].called, 'logger called').to.be.true;\n\t\t\t\texpect(console[consoleLevel].args, 'arguments of logger call').to.eql([PARAMS]);\n\t\t\t});\n\t\t});\n\t});\n\tdescribe('.config()', () => {\n\t\tbeforeEach('reset configurations', () => {\n\t\t\tescalate.config(originalConfig);\n\t\t});\n\t\tit('returns updated configuration', ()=> {\n\t\t\tvar comparisonBase = escalate.config();\n\t\t\tvar func = _.constant('warn');\n\t\t\tvar newConfig = escalate.config({logThresholdStrategy: func});\n\t\t\tcomparisonBase.logThresholdStrategy = func;\n\t\t\texpect(comparisonBase).to.eql(newConfig);\n\t\t});\n\t\tit('returns detached configuration', ()=> {\n\t\t\tescalate.config().loggerStrategy = null;\n\t\t\texpect(escalate.config(), 'current config').to.eql(originalConfig);\n\t\t});\n\t\tit('accepts partial configuration', ()=> {\n\t\t\tescalate.config({loggerStrategy: originalConfig.loggerStrategy});\n\t\t\tescalate.config({panicStrategy: originalConfig.panicStrategy});\n\t\t\tescalate.config({logThresholdStrategy: originalConfig.logThresholdStrategy});\n\t\t\tescalate.config({panicThresholdStrategy: originalConfig.panicThresholdStrategy});\n\t\t});\n\t\tit('affects pre-existing mailboxes', ()=> {\n\t\t\tvar mailBox = escalate.getMailBox();\n\t\t\tvar panicSpy = sandbox.spy();\n\t\t\tescalate.config({panicStrategy: _.constant(panicSpy)});\n\t\t\texpect (()=> mailBox.fatal(...PARAMS), 'reporting fatal after overriding panic').not.to.throw();\n\t\t\texpect(panicSpy.calledOnce, 'panicSpy called once').to.be.true;\n\t\t\texpect(panicSpy.calledWithExactly(...PARAMS), 'panicSpy called with expected args').to.be.true;\n\t\t});\n\t});\n\tdescribe('mailbox', () => {\n\t\tvar mailBox, logger, panic;\n\t\tfunction replaceAllButEscalate(field, replacement){\n\t\t\tvar config = {};\n\t\t\tconfig[field] = (ctx) => ctx === 'escalate'? originalConfig[field](ctx) : replacement;\n\t\t\tescalate.config(config);\n\t\t}\n\t\tbeforeEach('init per test', ()=>{\n\t\t\tlogger = {};\n\t\t\tpanic = sandbox.spy();\n\t\t\tmailBox = escalate.getMailBox('some context');\n\t\t\treplaceAllButEscalate('loggerStrategy', logger);\n\t\t\treplaceAllButEscalate('panicStrategy', panic);\n\t\t});\n\n\t\tEXPECTED_LEVELS.forEach((panicLevel, panicLevelIdx) => {\n\t\t\tdescribe(`with panic threshold ${panicLevel}`, () => {\n\t\t\t\tbeforeEach('reset log level to avoid it being higher than panic level', () => {\n\t\t\t\t\treplaceAllButEscalate('logThresholdStrategy', 'debug');\n\t\t\t\t});\n\t\t\t\tbeforeEach(`panic threshold ${panicLevel}`, () => {\n\t\t\t\t\treplaceAllButEscalate('panicThresholdStrategy', panicLevel);\n\t\t\t\t});\n\t\t\t\tEXPECTED_LEVELS.slice(0, panicLevelIdx + 1).forEach((logLevel, logLevelIdx) => {\n\t\t\t\t\tdescribe(`and log threshold ${logLevel}`, () => {\n\t\t\t\t\t\tbeforeEach(`log threshold ${logLevel}`, () => {\n\t\t\t\t\t\t\treplaceAllButEscalate('logThresholdStrategy', logLevel);\n\t\t\t\t\t\t});\n\t\t\t\t\t\tEXPECTED_LEVELS.forEach((reportLevel, reportLevelIdx) => {\n\t\t\t\t\t\t\tfunction levelTestSuite(reportFn) {\n\t\t\t\t\t\t\t\treturn () => {\n\t\t\t\t\t\t\t\t\tbeforeEach(`spy on logger.${reportLevel} and report`, ()=> {\n\t\t\t\t\t\t\t\t\t\tlogger[reportLevel] = sandbox.spy();\n\t\t\t\t\t\t\t\t\t\treportFn();\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\tif (reportLevelIdx >= panicLevelIdx || reportLevelIdx < logLevelIdx) {\n\t\t\t\t\t\t\t\t\t\tit(`logger.${reportLevel} is not called`, ()=> {\n\t\t\t\t\t\t\t\t\t\t\texpect(logger[reportLevel].called, 'logger called').to.be.false;\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tit(`logger.${reportLevel} is called`, ()=> {\n\t\t\t\t\t\t\t\t\t\t\texpect(logger[reportLevel].args, 'logger called exactly once with the expected arguments').to.eql([PARAMS]);\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (reportLevelIdx < panicLevelIdx) {\n\t\t\t\t\t\t\t\t\t\tit(`panic is not called`, ()=> {\n\t\t\t\t\t\t\t\t\t\t\texpect(panic.called, 'panic called').to.be.false;\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tit(`panic is called`, ()=> {\n\t\t\t\t\t\t\t\t\t\t\texpect(panic.args, 'panic called exactly once with the expected arguments').to.eql([PARAMS]);\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdescribe(`.${reportLevel} method`, levelTestSuite(() => mailBox[reportLevel](...PARAMS)));\n\t\t\t\t\t\t\tdescribe(`.post('${reportLevel}',...) method`, levelTestSuite(() => mailBox.post(reportLevel, ...PARAMS)));\n\t\t\t\t\t\t\tdescribe(`.${reportLevel}Check method`, () => {\n\t\t\t\t\t\t\t\tit(`returns ${reportLevelIdx >= logLevelIdx}`, () => {\n\t\t\t\t\t\t\t\t\texpect(mailBox[reportLevel+'Check']()).to.equal(reportLevelIdx >= logLevelIdx);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tdescribe(`.levelCheck('${reportLevel}', ...) method`, () => {\n\t\t\t\t\t\t\t\tit(`returns ${reportLevelIdx >= logLevelIdx}`, () => {\n\t\t\t\t\t\t\t\t\texpect(mailBox.levelCheck(reportLevel)).to.equal(reportLevelIdx >= logLevelIdx);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t\tdescribe('timers', () => {\n\n\t\t\tit('should log info with time duration', ()=>{\n\t\t\t\tconst clock = sandbox.useFakeTimers();\n\t\t\t\tescalate.config(originalConfig);\n\t\t\t\tconst infoSpy = sandbox.spy();\n\t\t\t\tescalate.config({\n\t\t\t\t\tactivateTimers:true,\n\t\t\t\t\tloggerStrategy:(context)=>({\n\t\t\t\t\t\tinfo:infoSpy,\n\t\t\t\t\t\twarn:()=>{},\n\t\t\t\t\t\terror:()=>{},\n\t\t\t\t\t\tlog:()=>{}\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t\tconst myMailBox = escalate.getMailBox('new context');\n\t\t\t\tmyMailBox.startTimer('a');\n\t\t\t\tclock.tick(5);\n\t\t\t\t\n\t\t\t\tmyMailBox.endTimer('a');\n\t\t\t\texpect(infoSpy.args).to.be.eql([['timer a took 5','timer','a',5]]);\n\t\t\t});\n\n\t\t\tit('should not log timers when activateTimers config is false', ()=>{\n\t\t\t\tconst clock = sandbox.useFakeTimers();\n\t\t\t\tescalate.config(originalConfig);\n\t\t\t\tconst infoSpy = sandbox.spy();\n\t\t\t\tescalate.config({\n\t\t\t\t\tactivateTimers:false,\n\t\t\t\t\tloggerStrategy:(context)=>({\n\t\t\t\t\t\tinfo:infoSpy,\n\t\t\t\t\t\twarn:()=>{},\n\t\t\t\t\t\terror:()=>{},\n\t\t\t\t\t\tlog:()=>{}\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t\tmailBox.startTimer('a');\n\t\t\t\tclock.tick(5);\n\t\t\t\t\n\t\t\t\tmailBox.endTimer('a');\n\t\t\t\texpect(infoSpy.args).to.be.eql([]);\n\t\t\t});\n\n\t\t});\n\t});\n});"]}